Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     new_loop_label -> <empty>
Rule 2     new_scope -> <empty>
Rule 3     new_scope_loop -> <empty>
Rule 4     program -> new_scope statement
Rule 5     program -> new_scope funclist
Rule 6     program -> <empty>
Rule 7     funclist -> funcdef funclist1
Rule 8     funclist1 -> funclist
Rule 9     funclist1 -> <empty>
Rule 10    funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE
Rule 11    types -> INT
Rule 12    types -> FLOAT
Rule 13    types -> STRING
Rule 14    paramlist -> STRING listdcl IDENT paramlist1
Rule 15    paramlist -> FLOAT listdcl IDENT paramlist1
Rule 16    paramlist -> INT listdcl IDENT paramlist1
Rule 17    paramlist -> <empty>
Rule 18    paramlist1 -> COMMA paramlist
Rule 19    paramlist1 -> <empty>
Rule 20    listdcl -> LBRACKET RBRACKET listdcl
Rule 21    listdcl -> <empty>
Rule 22    statement -> INT IDENT statement2
Rule 23    statement -> FLOAT IDENT statement2
Rule 24    statement -> STRING IDENT statement2
Rule 25    statement -> IDENT statement1
Rule 26    statement -> printstat SEMICOLON
Rule 27    statement -> readstat SEMICOLON
Rule 28    statement -> returnstat SEMICOLON
Rule 29    statement -> ifstat
Rule 30    statement -> forstat
Rule 31    statement -> whilestat
Rule 32    statement -> new_scope LBRACE statelist RBRACE
Rule 33    statement -> BREAK SEMICOLON
Rule 34    statement -> SEMICOLON
Rule 35    statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON
Rule 36    statement1 -> ASSIGN atribstat1 SEMICOLON
Rule 37    statement1 -> LPAREN paramlistcall RPAREN SEMICOLON
Rule 38    statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
Rule 39    statement2 -> SEMICOLON
Rule 40    atribstat1 -> expression
Rule 41    atribstat1 -> allocexpression
Rule 42    atribstat1 -> funccall
Rule 43    funccall -> IDENT LPAREN paramlistcall RPAREN
Rule 44    paramlistcall -> factor paramlistcall2
Rule 45    paramlistcall -> <empty>
Rule 46    paramlistcall1 -> COMMA paramlistcall
Rule 47    paramlistcall1 -> <empty>
Rule 48    paramlistcall2 -> LBRACKET numexpression RBRACKET lvalue1 paramlistcall1
Rule 49    paramlistcall2 -> paramlistcall1
Rule 50    printstat -> PRINT expression
Rule 51    readstat -> READ expression
Rule 52    returnstat -> RETURN returnstat1
Rule 53    returnstat1 -> expression
Rule 54    returnstat1 -> <empty>
Rule 55    ifstat -> IF LPAREN expression RPAREN statement ifstat1
Rule 56    ifstat1 -> ELSE statement
Rule 57    ifstat1 -> <empty>
Rule 58    forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
Rule 59    forstat1 -> IDENT forstat3
Rule 60    forstat1 -> <empty>
Rule 61    forstat2 -> expression
Rule 62    forstat2 -> <empty>
Rule 63    forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1
Rule 64    forstat3 -> ASSIGN atribstat1
Rule 65    whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
Rule 66    statelist -> statement statelist1
Rule 67    statelist1 -> statelist
Rule 68    statelist1 -> <empty>
Rule 69    allocexpression -> NEW types LBRACKET numexpression RBRACKET lvalue1
Rule 70    expression -> numexpression expression1
Rule 71    expression1 -> compoperator numexpression
Rule 72    expression1 -> <empty>
Rule 73    compoperator -> GT
Rule 74    compoperator -> LT
Rule 75    compoperator -> GE
Rule 76    compoperator -> LE
Rule 77    compoperator -> EQ
Rule 78    compoperator -> NEQ
Rule 79    numexpression -> term numexpression1
Rule 80    numexpression1 -> addsub term
Rule 81    numexpression1 -> <empty>
Rule 82    addsub -> PLUS
Rule 83    addsub -> MINUS
Rule 84    term -> unaryexpr term1
Rule 85    term1 -> multdiv unaryexpr term1
Rule 86    term1 -> <empty>
Rule 87    multdiv -> MULTIPLY
Rule 88    multdiv -> DIVIDE
Rule 89    multdiv -> REM
Rule 90    unaryexpr -> addsub factor
Rule 91    unaryexpr -> factor
Rule 92    factor -> int_constant
Rule 93    factor -> float_constant
Rule 94    factor -> string_constant
Rule 95    factor -> null_constant
Rule 96    factor -> IDENT lvalue1
Rule 97    factor -> LPAREN numexpression RPAREN
Rule 98    lvalue1 -> LBRACKET numexpression RBRACKET lvalue1
Rule 99    lvalue1 -> <empty>

Terminals, with rules where they appear

ASSIGN               : 35 36 63 64
BREAK                : 33
COMMA                : 18 46
DEF                  : 10
DIVIDE               : 88
ELSE                 : 56
EQ                   : 77
FLOAT                : 12 15 23
FOR                  : 58
GE                   : 75
GT                   : 73
IDENT                : 10 14 15 16 22 23 24 25 43 59 96
IF                   : 55
INT                  : 11 16 22
LBRACE               : 10 32 58 65
LBRACKET             : 20 35 38 48 63 69 98
LE                   : 76
LPAREN               : 10 37 43 55 58 65 97
LT                   : 74
MINUS                : 83
MULTIPLY             : 87
NEQ                  : 78
NEW                  : 69
PLUS                 : 82
PRINT                : 50
RBRACE               : 10 32 58 65
RBRACKET             : 20 35 38 48 63 69 98
READ                 : 51
REM                  : 89
RETURN               : 52
RPAREN               : 10 37 43 55 58 65 97
SEMICOLON            : 26 27 28 33 34 35 36 37 38 39 58 58
STRING               : 13 14 24
WHILE                : 65
error                : 
float_constant       : 93
int_constant         : 92
null_constant        : 95
string_constant      : 94

Nonterminals, with rules where they appear

addsub               : 80 90
allocexpression      : 41
atribstat1           : 35 36 63 64
compoperator         : 71
expression           : 40 50 51 53 55 61 65
expression1          : 70
factor               : 44 90 91
forstat              : 30
forstat1             : 58 58
forstat2             : 58
forstat3             : 59
funccall             : 42
funcdef              : 7
funclist             : 5 8
funclist1            : 7
ifstat               : 29
ifstat1              : 55
listdcl              : 14 15 16 20
lvalue1              : 35 38 48 63 69 96 98
multdiv              : 85
new_loop_label       : 58 65
new_scope            : 4 5 10 32
new_scope_loop       : 58 65
numexpression        : 35 38 48 63 69 70 71 97 98
numexpression1       : 79
paramlist            : 10 18
paramlist1           : 14 15 16
paramlistcall        : 37 43 46
paramlistcall1       : 48 49
paramlistcall2       : 44
printstat            : 26
program              : 0
readstat             : 27
returnstat           : 28
returnstat1          : 52
statelist            : 10 32 58 65 67
statelist1           : 66
statement            : 4 55 56 66
statement1           : 25
statement2           : 22 23 24
term                 : 79 80
term1                : 84 85
types                : 69
unaryexpr            : 84 85
whilestat            : 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (4) program -> . new_scope statement
    (5) program -> . new_scope funclist
    (6) program -> .
    (2) new_scope -> .

    $end            reduce using rule 6 (program -> .)
    INT             reduce using rule 2 (new_scope -> .)
    FLOAT           reduce using rule 2 (new_scope -> .)
    STRING          reduce using rule 2 (new_scope -> .)
    IDENT           reduce using rule 2 (new_scope -> .)
    BREAK           reduce using rule 2 (new_scope -> .)
    SEMICOLON       reduce using rule 2 (new_scope -> .)
    PRINT           reduce using rule 2 (new_scope -> .)
    READ            reduce using rule 2 (new_scope -> .)
    RETURN          reduce using rule 2 (new_scope -> .)
    IF              reduce using rule 2 (new_scope -> .)
    DEF             reduce using rule 2 (new_scope -> .)
    LBRACE          reduce using rule 2 (new_scope -> .)
    FOR             reduce using rule 2 (new_scope -> .)
    WHILE           reduce using rule 2 (new_scope -> .)

    program                        shift and go to state 1
    new_scope                      shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (4) program -> new_scope . statement
    (5) program -> new_scope . funclist
    (22) statement -> . INT IDENT statement2
    (23) statement -> . FLOAT IDENT statement2
    (24) statement -> . STRING IDENT statement2
    (25) statement -> . IDENT statement1
    (26) statement -> . printstat SEMICOLON
    (27) statement -> . readstat SEMICOLON
    (28) statement -> . returnstat SEMICOLON
    (29) statement -> . ifstat
    (30) statement -> . forstat
    (31) statement -> . whilestat
    (32) statement -> . new_scope LBRACE statelist RBRACE
    (33) statement -> . BREAK SEMICOLON
    (34) statement -> . SEMICOLON
    (7) funclist -> . funcdef funclist1
    (50) printstat -> . PRINT expression
    (51) readstat -> . READ expression
    (52) returnstat -> . RETURN returnstat1
    (55) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (58) forstat -> . new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> . new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (2) new_scope -> .
    (10) funcdef -> . DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE
    (1) new_loop_label -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    LBRACE          reduce using rule 2 (new_scope -> .)
    DEF             shift and go to state 24
    FOR             reduce using rule 1 (new_loop_label -> .)
    WHILE           reduce using rule 1 (new_loop_label -> .)

    new_scope                      shift and go to state 3
    statement                      shift and go to state 4
    funclist                       shift and go to state 5
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    funcdef                        shift and go to state 18
    new_loop_label                 shift and go to state 23

state 3

    (32) statement -> new_scope . LBRACE statelist RBRACE

    LBRACE          shift and go to state 25


state 4

    (4) program -> new_scope statement .

    $end            reduce using rule 4 (program -> new_scope statement .)


state 5

    (5) program -> new_scope funclist .

    $end            reduce using rule 5 (program -> new_scope funclist .)


state 6

    (22) statement -> INT . IDENT statement2

    IDENT           shift and go to state 26


state 7

    (25) statement -> IDENT . statement1
    (35) statement1 -> . LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON
    (36) statement1 -> . ASSIGN atribstat1 SEMICOLON
    (37) statement1 -> . LPAREN paramlistcall RPAREN SEMICOLON

    LBRACKET        shift and go to state 28
    ASSIGN          shift and go to state 29
    LPAREN          shift and go to state 30

    statement1                     shift and go to state 27

state 8

    (23) statement -> FLOAT . IDENT statement2

    IDENT           shift and go to state 31


state 9

    (24) statement -> STRING . IDENT statement2

    IDENT           shift and go to state 32


state 10

    (26) statement -> printstat . SEMICOLON

    SEMICOLON       shift and go to state 33


state 11

    (34) statement -> SEMICOLON .

    $end            reduce using rule 34 (statement -> SEMICOLON .)
    INT             reduce using rule 34 (statement -> SEMICOLON .)
    FLOAT           reduce using rule 34 (statement -> SEMICOLON .)
    STRING          reduce using rule 34 (statement -> SEMICOLON .)
    IDENT           reduce using rule 34 (statement -> SEMICOLON .)
    BREAK           reduce using rule 34 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 34 (statement -> SEMICOLON .)
    PRINT           reduce using rule 34 (statement -> SEMICOLON .)
    READ            reduce using rule 34 (statement -> SEMICOLON .)
    RETURN          reduce using rule 34 (statement -> SEMICOLON .)
    IF              reduce using rule 34 (statement -> SEMICOLON .)
    LBRACE          reduce using rule 34 (statement -> SEMICOLON .)
    FOR             reduce using rule 34 (statement -> SEMICOLON .)
    WHILE           reduce using rule 34 (statement -> SEMICOLON .)
    RBRACE          reduce using rule 34 (statement -> SEMICOLON .)
    ELSE            reduce using rule 34 (statement -> SEMICOLON .)


state 12

    (27) statement -> readstat . SEMICOLON

    SEMICOLON       shift and go to state 34


state 13

    (28) statement -> returnstat . SEMICOLON

    SEMICOLON       shift and go to state 35


state 14

    (29) statement -> ifstat .

    $end            reduce using rule 29 (statement -> ifstat .)
    INT             reduce using rule 29 (statement -> ifstat .)
    FLOAT           reduce using rule 29 (statement -> ifstat .)
    STRING          reduce using rule 29 (statement -> ifstat .)
    IDENT           reduce using rule 29 (statement -> ifstat .)
    BREAK           reduce using rule 29 (statement -> ifstat .)
    SEMICOLON       reduce using rule 29 (statement -> ifstat .)
    PRINT           reduce using rule 29 (statement -> ifstat .)
    READ            reduce using rule 29 (statement -> ifstat .)
    RETURN          reduce using rule 29 (statement -> ifstat .)
    IF              reduce using rule 29 (statement -> ifstat .)
    LBRACE          reduce using rule 29 (statement -> ifstat .)
    FOR             reduce using rule 29 (statement -> ifstat .)
    WHILE           reduce using rule 29 (statement -> ifstat .)
    RBRACE          reduce using rule 29 (statement -> ifstat .)
    ELSE            reduce using rule 29 (statement -> ifstat .)


state 15

    (30) statement -> forstat .

    $end            reduce using rule 30 (statement -> forstat .)
    INT             reduce using rule 30 (statement -> forstat .)
    FLOAT           reduce using rule 30 (statement -> forstat .)
    STRING          reduce using rule 30 (statement -> forstat .)
    IDENT           reduce using rule 30 (statement -> forstat .)
    BREAK           reduce using rule 30 (statement -> forstat .)
    SEMICOLON       reduce using rule 30 (statement -> forstat .)
    PRINT           reduce using rule 30 (statement -> forstat .)
    READ            reduce using rule 30 (statement -> forstat .)
    RETURN          reduce using rule 30 (statement -> forstat .)
    IF              reduce using rule 30 (statement -> forstat .)
    LBRACE          reduce using rule 30 (statement -> forstat .)
    FOR             reduce using rule 30 (statement -> forstat .)
    WHILE           reduce using rule 30 (statement -> forstat .)
    RBRACE          reduce using rule 30 (statement -> forstat .)
    ELSE            reduce using rule 30 (statement -> forstat .)


state 16

    (31) statement -> whilestat .

    $end            reduce using rule 31 (statement -> whilestat .)
    INT             reduce using rule 31 (statement -> whilestat .)
    FLOAT           reduce using rule 31 (statement -> whilestat .)
    STRING          reduce using rule 31 (statement -> whilestat .)
    IDENT           reduce using rule 31 (statement -> whilestat .)
    BREAK           reduce using rule 31 (statement -> whilestat .)
    SEMICOLON       reduce using rule 31 (statement -> whilestat .)
    PRINT           reduce using rule 31 (statement -> whilestat .)
    READ            reduce using rule 31 (statement -> whilestat .)
    RETURN          reduce using rule 31 (statement -> whilestat .)
    IF              reduce using rule 31 (statement -> whilestat .)
    LBRACE          reduce using rule 31 (statement -> whilestat .)
    FOR             reduce using rule 31 (statement -> whilestat .)
    WHILE           reduce using rule 31 (statement -> whilestat .)
    RBRACE          reduce using rule 31 (statement -> whilestat .)
    ELSE            reduce using rule 31 (statement -> whilestat .)


state 17

    (33) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 36


state 18

    (7) funclist -> funcdef . funclist1
    (8) funclist1 -> . funclist
    (9) funclist1 -> .
    (7) funclist -> . funcdef funclist1
    (10) funcdef -> . DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE

    $end            reduce using rule 9 (funclist1 -> .)
    DEF             shift and go to state 24

    funcdef                        shift and go to state 18
    funclist1                      shift and go to state 37
    funclist                       shift and go to state 38

state 19

    (50) printstat -> PRINT . expression
    (70) expression -> . numexpression expression1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    expression                     shift and go to state 39
    numexpression                  shift and go to state 40
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 20

    (51) readstat -> READ . expression
    (70) expression -> . numexpression expression1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    expression                     shift and go to state 53
    numexpression                  shift and go to state 40
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 21

    (52) returnstat -> RETURN . returnstat1
    (53) returnstat1 -> . expression
    (54) returnstat1 -> .
    (70) expression -> . numexpression expression1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    SEMICOLON       reduce using rule 54 (returnstat1 -> .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    returnstat1                    shift and go to state 54
    expression                     shift and go to state 55
    numexpression                  shift and go to state 40
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 22

    (55) ifstat -> IF . LPAREN expression RPAREN statement ifstat1

    LPAREN          shift and go to state 56


state 23

    (58) forstat -> new_loop_label . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> new_loop_label . WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE

    FOR             shift and go to state 57
    WHILE           shift and go to state 58


state 24

    (10) funcdef -> DEF . IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE

    IDENT           shift and go to state 59


state 25

    (32) statement -> new_scope LBRACE . statelist RBRACE
    (66) statelist -> . statement statelist1
    (22) statement -> . INT IDENT statement2
    (23) statement -> . FLOAT IDENT statement2
    (24) statement -> . STRING IDENT statement2
    (25) statement -> . IDENT statement1
    (26) statement -> . printstat SEMICOLON
    (27) statement -> . readstat SEMICOLON
    (28) statement -> . returnstat SEMICOLON
    (29) statement -> . ifstat
    (30) statement -> . forstat
    (31) statement -> . whilestat
    (32) statement -> . new_scope LBRACE statelist RBRACE
    (33) statement -> . BREAK SEMICOLON
    (34) statement -> . SEMICOLON
    (50) printstat -> . PRINT expression
    (51) readstat -> . READ expression
    (52) returnstat -> . RETURN returnstat1
    (55) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (58) forstat -> . new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> . new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (2) new_scope -> .
    (1) new_loop_label -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    LBRACE          reduce using rule 2 (new_scope -> .)
    FOR             reduce using rule 1 (new_loop_label -> .)
    WHILE           reduce using rule 1 (new_loop_label -> .)

    new_scope                      shift and go to state 3
    statelist                      shift and go to state 60
    statement                      shift and go to state 61
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_loop_label                 shift and go to state 23

state 26

    (22) statement -> INT IDENT . statement2
    (38) statement2 -> . LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
    (39) statement2 -> . SEMICOLON

    LBRACKET        shift and go to state 63
    SEMICOLON       shift and go to state 64

    statement2                     shift and go to state 62

state 27

    (25) statement -> IDENT statement1 .

    $end            reduce using rule 25 (statement -> IDENT statement1 .)
    INT             reduce using rule 25 (statement -> IDENT statement1 .)
    FLOAT           reduce using rule 25 (statement -> IDENT statement1 .)
    STRING          reduce using rule 25 (statement -> IDENT statement1 .)
    IDENT           reduce using rule 25 (statement -> IDENT statement1 .)
    BREAK           reduce using rule 25 (statement -> IDENT statement1 .)
    SEMICOLON       reduce using rule 25 (statement -> IDENT statement1 .)
    PRINT           reduce using rule 25 (statement -> IDENT statement1 .)
    READ            reduce using rule 25 (statement -> IDENT statement1 .)
    RETURN          reduce using rule 25 (statement -> IDENT statement1 .)
    IF              reduce using rule 25 (statement -> IDENT statement1 .)
    LBRACE          reduce using rule 25 (statement -> IDENT statement1 .)
    FOR             reduce using rule 25 (statement -> IDENT statement1 .)
    WHILE           reduce using rule 25 (statement -> IDENT statement1 .)
    RBRACE          reduce using rule 25 (statement -> IDENT statement1 .)
    ELSE            reduce using rule 25 (statement -> IDENT statement1 .)


state 28

    (35) statement1 -> LBRACKET . numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 65
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 29

    (36) statement1 -> ASSIGN . atribstat1 SEMICOLON
    (40) atribstat1 -> . expression
    (41) atribstat1 -> . allocexpression
    (42) atribstat1 -> . funccall
    (70) expression -> . numexpression expression1
    (69) allocexpression -> . NEW types LBRACKET numexpression RBRACKET lvalue1
    (43) funccall -> . IDENT LPAREN paramlistcall RPAREN
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    NEW             shift and go to state 70
    IDENT           shift and go to state 71
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    LPAREN          shift and go to state 52

    atribstat1                     shift and go to state 66
    expression                     shift and go to state 67
    allocexpression                shift and go to state 68
    funccall                       shift and go to state 69
    numexpression                  shift and go to state 40
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 30

    (37) statement1 -> LPAREN . paramlistcall RPAREN SEMICOLON
    (44) paramlistcall -> . factor paramlistcall2
    (45) paramlistcall -> .
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    RPAREN          reduce using rule 45 (paramlistcall -> .)
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    paramlistcall                  shift and go to state 72
    factor                         shift and go to state 73

state 31

    (23) statement -> FLOAT IDENT . statement2
    (38) statement2 -> . LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
    (39) statement2 -> . SEMICOLON

    LBRACKET        shift and go to state 63
    SEMICOLON       shift and go to state 64

    statement2                     shift and go to state 74

state 32

    (24) statement -> STRING IDENT . statement2
    (38) statement2 -> . LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
    (39) statement2 -> . SEMICOLON

    LBRACKET        shift and go to state 63
    SEMICOLON       shift and go to state 64

    statement2                     shift and go to state 75

state 33

    (26) statement -> printstat SEMICOLON .

    $end            reduce using rule 26 (statement -> printstat SEMICOLON .)
    INT             reduce using rule 26 (statement -> printstat SEMICOLON .)
    FLOAT           reduce using rule 26 (statement -> printstat SEMICOLON .)
    STRING          reduce using rule 26 (statement -> printstat SEMICOLON .)
    IDENT           reduce using rule 26 (statement -> printstat SEMICOLON .)
    BREAK           reduce using rule 26 (statement -> printstat SEMICOLON .)
    SEMICOLON       reduce using rule 26 (statement -> printstat SEMICOLON .)
    PRINT           reduce using rule 26 (statement -> printstat SEMICOLON .)
    READ            reduce using rule 26 (statement -> printstat SEMICOLON .)
    RETURN          reduce using rule 26 (statement -> printstat SEMICOLON .)
    IF              reduce using rule 26 (statement -> printstat SEMICOLON .)
    LBRACE          reduce using rule 26 (statement -> printstat SEMICOLON .)
    FOR             reduce using rule 26 (statement -> printstat SEMICOLON .)
    WHILE           reduce using rule 26 (statement -> printstat SEMICOLON .)
    RBRACE          reduce using rule 26 (statement -> printstat SEMICOLON .)
    ELSE            reduce using rule 26 (statement -> printstat SEMICOLON .)


state 34

    (27) statement -> readstat SEMICOLON .

    $end            reduce using rule 27 (statement -> readstat SEMICOLON .)
    INT             reduce using rule 27 (statement -> readstat SEMICOLON .)
    FLOAT           reduce using rule 27 (statement -> readstat SEMICOLON .)
    STRING          reduce using rule 27 (statement -> readstat SEMICOLON .)
    IDENT           reduce using rule 27 (statement -> readstat SEMICOLON .)
    BREAK           reduce using rule 27 (statement -> readstat SEMICOLON .)
    SEMICOLON       reduce using rule 27 (statement -> readstat SEMICOLON .)
    PRINT           reduce using rule 27 (statement -> readstat SEMICOLON .)
    READ            reduce using rule 27 (statement -> readstat SEMICOLON .)
    RETURN          reduce using rule 27 (statement -> readstat SEMICOLON .)
    IF              reduce using rule 27 (statement -> readstat SEMICOLON .)
    LBRACE          reduce using rule 27 (statement -> readstat SEMICOLON .)
    FOR             reduce using rule 27 (statement -> readstat SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> readstat SEMICOLON .)
    RBRACE          reduce using rule 27 (statement -> readstat SEMICOLON .)
    ELSE            reduce using rule 27 (statement -> readstat SEMICOLON .)


state 35

    (28) statement -> returnstat SEMICOLON .

    $end            reduce using rule 28 (statement -> returnstat SEMICOLON .)
    INT             reduce using rule 28 (statement -> returnstat SEMICOLON .)
    FLOAT           reduce using rule 28 (statement -> returnstat SEMICOLON .)
    STRING          reduce using rule 28 (statement -> returnstat SEMICOLON .)
    IDENT           reduce using rule 28 (statement -> returnstat SEMICOLON .)
    BREAK           reduce using rule 28 (statement -> returnstat SEMICOLON .)
    SEMICOLON       reduce using rule 28 (statement -> returnstat SEMICOLON .)
    PRINT           reduce using rule 28 (statement -> returnstat SEMICOLON .)
    READ            reduce using rule 28 (statement -> returnstat SEMICOLON .)
    RETURN          reduce using rule 28 (statement -> returnstat SEMICOLON .)
    IF              reduce using rule 28 (statement -> returnstat SEMICOLON .)
    LBRACE          reduce using rule 28 (statement -> returnstat SEMICOLON .)
    FOR             reduce using rule 28 (statement -> returnstat SEMICOLON .)
    WHILE           reduce using rule 28 (statement -> returnstat SEMICOLON .)
    RBRACE          reduce using rule 28 (statement -> returnstat SEMICOLON .)
    ELSE            reduce using rule 28 (statement -> returnstat SEMICOLON .)


state 36

    (33) statement -> BREAK SEMICOLON .

    $end            reduce using rule 33 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 33 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 33 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 33 (statement -> BREAK SEMICOLON .)
    IDENT           reduce using rule 33 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 33 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 33 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 33 (statement -> BREAK SEMICOLON .)
    READ            reduce using rule 33 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 33 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 33 (statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 33 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 33 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 33 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 33 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 33 (statement -> BREAK SEMICOLON .)


state 37

    (7) funclist -> funcdef funclist1 .

    $end            reduce using rule 7 (funclist -> funcdef funclist1 .)


state 38

    (8) funclist1 -> funclist .

    $end            reduce using rule 8 (funclist1 -> funclist .)


state 39

    (50) printstat -> PRINT expression .

    SEMICOLON       reduce using rule 50 (printstat -> PRINT expression .)


state 40

    (70) expression -> numexpression . expression1
    (71) expression1 -> . compoperator numexpression
    (72) expression1 -> .
    (73) compoperator -> . GT
    (74) compoperator -> . LT
    (75) compoperator -> . GE
    (76) compoperator -> . LE
    (77) compoperator -> . EQ
    (78) compoperator -> . NEQ

    SEMICOLON       reduce using rule 72 (expression1 -> .)
    RPAREN          reduce using rule 72 (expression1 -> .)
    GT              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    LE              shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83

    expression1                    shift and go to state 76
    compoperator                   shift and go to state 77

state 41

    (79) numexpression -> term . numexpression1
    (80) numexpression1 -> . addsub term
    (81) numexpression1 -> .
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS

    GT              reduce using rule 81 (numexpression1 -> .)
    LT              reduce using rule 81 (numexpression1 -> .)
    GE              reduce using rule 81 (numexpression1 -> .)
    LE              reduce using rule 81 (numexpression1 -> .)
    EQ              reduce using rule 81 (numexpression1 -> .)
    NEQ             reduce using rule 81 (numexpression1 -> .)
    SEMICOLON       reduce using rule 81 (numexpression1 -> .)
    RBRACKET        reduce using rule 81 (numexpression1 -> .)
    RPAREN          reduce using rule 81 (numexpression1 -> .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46

    numexpression1                 shift and go to state 84
    addsub                         shift and go to state 85

state 42

    (84) term -> unaryexpr . term1
    (85) term1 -> . multdiv unaryexpr term1
    (86) term1 -> .
    (87) multdiv -> . MULTIPLY
    (88) multdiv -> . DIVIDE
    (89) multdiv -> . REM

    PLUS            reduce using rule 86 (term1 -> .)
    MINUS           reduce using rule 86 (term1 -> .)
    GT              reduce using rule 86 (term1 -> .)
    LT              reduce using rule 86 (term1 -> .)
    GE              reduce using rule 86 (term1 -> .)
    LE              reduce using rule 86 (term1 -> .)
    EQ              reduce using rule 86 (term1 -> .)
    NEQ             reduce using rule 86 (term1 -> .)
    SEMICOLON       reduce using rule 86 (term1 -> .)
    RBRACKET        reduce using rule 86 (term1 -> .)
    RPAREN          reduce using rule 86 (term1 -> .)
    MULTIPLY        shift and go to state 88
    DIVIDE          shift and go to state 89
    REM             shift and go to state 90

    term1                          shift and go to state 86
    multdiv                        shift and go to state 87

state 43

    (90) unaryexpr -> addsub . factor
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    factor                         shift and go to state 91

state 44

    (91) unaryexpr -> factor .

    MULTIPLY        reduce using rule 91 (unaryexpr -> factor .)
    DIVIDE          reduce using rule 91 (unaryexpr -> factor .)
    REM             reduce using rule 91 (unaryexpr -> factor .)
    PLUS            reduce using rule 91 (unaryexpr -> factor .)
    MINUS           reduce using rule 91 (unaryexpr -> factor .)
    GT              reduce using rule 91 (unaryexpr -> factor .)
    LT              reduce using rule 91 (unaryexpr -> factor .)
    GE              reduce using rule 91 (unaryexpr -> factor .)
    LE              reduce using rule 91 (unaryexpr -> factor .)
    EQ              reduce using rule 91 (unaryexpr -> factor .)
    NEQ             reduce using rule 91 (unaryexpr -> factor .)
    SEMICOLON       reduce using rule 91 (unaryexpr -> factor .)
    RBRACKET        reduce using rule 91 (unaryexpr -> factor .)
    RPAREN          reduce using rule 91 (unaryexpr -> factor .)


state 45

    (82) addsub -> PLUS .

    int_constant    reduce using rule 82 (addsub -> PLUS .)
    float_constant  reduce using rule 82 (addsub -> PLUS .)
    string_constant reduce using rule 82 (addsub -> PLUS .)
    null_constant   reduce using rule 82 (addsub -> PLUS .)
    IDENT           reduce using rule 82 (addsub -> PLUS .)
    LPAREN          reduce using rule 82 (addsub -> PLUS .)
    PLUS            reduce using rule 82 (addsub -> PLUS .)
    MINUS           reduce using rule 82 (addsub -> PLUS .)


state 46

    (83) addsub -> MINUS .

    int_constant    reduce using rule 83 (addsub -> MINUS .)
    float_constant  reduce using rule 83 (addsub -> MINUS .)
    string_constant reduce using rule 83 (addsub -> MINUS .)
    null_constant   reduce using rule 83 (addsub -> MINUS .)
    IDENT           reduce using rule 83 (addsub -> MINUS .)
    LPAREN          reduce using rule 83 (addsub -> MINUS .)
    PLUS            reduce using rule 83 (addsub -> MINUS .)
    MINUS           reduce using rule 83 (addsub -> MINUS .)


state 47

    (92) factor -> int_constant .

    MULTIPLY        reduce using rule 92 (factor -> int_constant .)
    DIVIDE          reduce using rule 92 (factor -> int_constant .)
    REM             reduce using rule 92 (factor -> int_constant .)
    PLUS            reduce using rule 92 (factor -> int_constant .)
    MINUS           reduce using rule 92 (factor -> int_constant .)
    GT              reduce using rule 92 (factor -> int_constant .)
    LT              reduce using rule 92 (factor -> int_constant .)
    GE              reduce using rule 92 (factor -> int_constant .)
    LE              reduce using rule 92 (factor -> int_constant .)
    EQ              reduce using rule 92 (factor -> int_constant .)
    NEQ             reduce using rule 92 (factor -> int_constant .)
    SEMICOLON       reduce using rule 92 (factor -> int_constant .)
    RBRACKET        reduce using rule 92 (factor -> int_constant .)
    LBRACKET        reduce using rule 92 (factor -> int_constant .)
    COMMA           reduce using rule 92 (factor -> int_constant .)
    RPAREN          reduce using rule 92 (factor -> int_constant .)


state 48

    (93) factor -> float_constant .

    MULTIPLY        reduce using rule 93 (factor -> float_constant .)
    DIVIDE          reduce using rule 93 (factor -> float_constant .)
    REM             reduce using rule 93 (factor -> float_constant .)
    PLUS            reduce using rule 93 (factor -> float_constant .)
    MINUS           reduce using rule 93 (factor -> float_constant .)
    GT              reduce using rule 93 (factor -> float_constant .)
    LT              reduce using rule 93 (factor -> float_constant .)
    GE              reduce using rule 93 (factor -> float_constant .)
    LE              reduce using rule 93 (factor -> float_constant .)
    EQ              reduce using rule 93 (factor -> float_constant .)
    NEQ             reduce using rule 93 (factor -> float_constant .)
    SEMICOLON       reduce using rule 93 (factor -> float_constant .)
    RBRACKET        reduce using rule 93 (factor -> float_constant .)
    LBRACKET        reduce using rule 93 (factor -> float_constant .)
    COMMA           reduce using rule 93 (factor -> float_constant .)
    RPAREN          reduce using rule 93 (factor -> float_constant .)


state 49

    (94) factor -> string_constant .

    MULTIPLY        reduce using rule 94 (factor -> string_constant .)
    DIVIDE          reduce using rule 94 (factor -> string_constant .)
    REM             reduce using rule 94 (factor -> string_constant .)
    PLUS            reduce using rule 94 (factor -> string_constant .)
    MINUS           reduce using rule 94 (factor -> string_constant .)
    GT              reduce using rule 94 (factor -> string_constant .)
    LT              reduce using rule 94 (factor -> string_constant .)
    GE              reduce using rule 94 (factor -> string_constant .)
    LE              reduce using rule 94 (factor -> string_constant .)
    EQ              reduce using rule 94 (factor -> string_constant .)
    NEQ             reduce using rule 94 (factor -> string_constant .)
    SEMICOLON       reduce using rule 94 (factor -> string_constant .)
    RBRACKET        reduce using rule 94 (factor -> string_constant .)
    LBRACKET        reduce using rule 94 (factor -> string_constant .)
    COMMA           reduce using rule 94 (factor -> string_constant .)
    RPAREN          reduce using rule 94 (factor -> string_constant .)


state 50

    (95) factor -> null_constant .

    MULTIPLY        reduce using rule 95 (factor -> null_constant .)
    DIVIDE          reduce using rule 95 (factor -> null_constant .)
    REM             reduce using rule 95 (factor -> null_constant .)
    PLUS            reduce using rule 95 (factor -> null_constant .)
    MINUS           reduce using rule 95 (factor -> null_constant .)
    GT              reduce using rule 95 (factor -> null_constant .)
    LT              reduce using rule 95 (factor -> null_constant .)
    GE              reduce using rule 95 (factor -> null_constant .)
    LE              reduce using rule 95 (factor -> null_constant .)
    EQ              reduce using rule 95 (factor -> null_constant .)
    NEQ             reduce using rule 95 (factor -> null_constant .)
    SEMICOLON       reduce using rule 95 (factor -> null_constant .)
    RBRACKET        reduce using rule 95 (factor -> null_constant .)
    LBRACKET        reduce using rule 95 (factor -> null_constant .)
    COMMA           reduce using rule 95 (factor -> null_constant .)
    RPAREN          reduce using rule 95 (factor -> null_constant .)


state 51

    (96) factor -> IDENT . lvalue1
    (98) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (99) lvalue1 -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 93
    MULTIPLY        reduce using rule 99 (lvalue1 -> .)
    DIVIDE          reduce using rule 99 (lvalue1 -> .)
    REM             reduce using rule 99 (lvalue1 -> .)
    PLUS            reduce using rule 99 (lvalue1 -> .)
    MINUS           reduce using rule 99 (lvalue1 -> .)
    GT              reduce using rule 99 (lvalue1 -> .)
    LT              reduce using rule 99 (lvalue1 -> .)
    GE              reduce using rule 99 (lvalue1 -> .)
    LE              reduce using rule 99 (lvalue1 -> .)
    EQ              reduce using rule 99 (lvalue1 -> .)
    NEQ             reduce using rule 99 (lvalue1 -> .)
    SEMICOLON       reduce using rule 99 (lvalue1 -> .)
    RBRACKET        reduce using rule 99 (lvalue1 -> .)
    COMMA           reduce using rule 99 (lvalue1 -> .)
    RPAREN          reduce using rule 99 (lvalue1 -> .)

  ! LBRACKET        [ reduce using rule 99 (lvalue1 -> .) ]

    lvalue1                        shift and go to state 92

state 52

    (97) factor -> LPAREN . numexpression RPAREN
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 94
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 53

    (51) readstat -> READ expression .

    SEMICOLON       reduce using rule 51 (readstat -> READ expression .)


state 54

    (52) returnstat -> RETURN returnstat1 .

    SEMICOLON       reduce using rule 52 (returnstat -> RETURN returnstat1 .)


state 55

    (53) returnstat1 -> expression .

    SEMICOLON       reduce using rule 53 (returnstat1 -> expression .)


state 56

    (55) ifstat -> IF LPAREN . expression RPAREN statement ifstat1
    (70) expression -> . numexpression expression1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    expression                     shift and go to state 95
    numexpression                  shift and go to state 40
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 57

    (58) forstat -> new_loop_label FOR . LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE

    LPAREN          shift and go to state 96


state 58

    (65) whilestat -> new_loop_label WHILE . LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE

    LPAREN          shift and go to state 97


state 59

    (10) funcdef -> DEF IDENT . new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE
    (2) new_scope -> .

    LPAREN          reduce using rule 2 (new_scope -> .)

    new_scope                      shift and go to state 98

state 60

    (32) statement -> new_scope LBRACE statelist . RBRACE

    RBRACE          shift and go to state 99


state 61

    (66) statelist -> statement . statelist1
    (67) statelist1 -> . statelist
    (68) statelist1 -> .
    (66) statelist -> . statement statelist1
    (22) statement -> . INT IDENT statement2
    (23) statement -> . FLOAT IDENT statement2
    (24) statement -> . STRING IDENT statement2
    (25) statement -> . IDENT statement1
    (26) statement -> . printstat SEMICOLON
    (27) statement -> . readstat SEMICOLON
    (28) statement -> . returnstat SEMICOLON
    (29) statement -> . ifstat
    (30) statement -> . forstat
    (31) statement -> . whilestat
    (32) statement -> . new_scope LBRACE statelist RBRACE
    (33) statement -> . BREAK SEMICOLON
    (34) statement -> . SEMICOLON
    (50) printstat -> . PRINT expression
    (51) readstat -> . READ expression
    (52) returnstat -> . RETURN returnstat1
    (55) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (58) forstat -> . new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> . new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (2) new_scope -> .
    (1) new_loop_label -> .

    RBRACE          reduce using rule 68 (statelist1 -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    LBRACE          reduce using rule 2 (new_scope -> .)
    FOR             reduce using rule 1 (new_loop_label -> .)
    WHILE           reduce using rule 1 (new_loop_label -> .)

    statement                      shift and go to state 61
    statelist1                     shift and go to state 100
    statelist                      shift and go to state 101
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3
    new_loop_label                 shift and go to state 23

state 62

    (22) statement -> INT IDENT statement2 .

    $end            reduce using rule 22 (statement -> INT IDENT statement2 .)
    INT             reduce using rule 22 (statement -> INT IDENT statement2 .)
    FLOAT           reduce using rule 22 (statement -> INT IDENT statement2 .)
    STRING          reduce using rule 22 (statement -> INT IDENT statement2 .)
    IDENT           reduce using rule 22 (statement -> INT IDENT statement2 .)
    BREAK           reduce using rule 22 (statement -> INT IDENT statement2 .)
    SEMICOLON       reduce using rule 22 (statement -> INT IDENT statement2 .)
    PRINT           reduce using rule 22 (statement -> INT IDENT statement2 .)
    READ            reduce using rule 22 (statement -> INT IDENT statement2 .)
    RETURN          reduce using rule 22 (statement -> INT IDENT statement2 .)
    IF              reduce using rule 22 (statement -> INT IDENT statement2 .)
    LBRACE          reduce using rule 22 (statement -> INT IDENT statement2 .)
    FOR             reduce using rule 22 (statement -> INT IDENT statement2 .)
    WHILE           reduce using rule 22 (statement -> INT IDENT statement2 .)
    RBRACE          reduce using rule 22 (statement -> INT IDENT statement2 .)
    ELSE            reduce using rule 22 (statement -> INT IDENT statement2 .)


state 63

    (38) statement2 -> LBRACKET . numexpression RBRACKET lvalue1 SEMICOLON
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 102
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 64

    (39) statement2 -> SEMICOLON .

    $end            reduce using rule 39 (statement2 -> SEMICOLON .)
    INT             reduce using rule 39 (statement2 -> SEMICOLON .)
    FLOAT           reduce using rule 39 (statement2 -> SEMICOLON .)
    STRING          reduce using rule 39 (statement2 -> SEMICOLON .)
    IDENT           reduce using rule 39 (statement2 -> SEMICOLON .)
    BREAK           reduce using rule 39 (statement2 -> SEMICOLON .)
    SEMICOLON       reduce using rule 39 (statement2 -> SEMICOLON .)
    PRINT           reduce using rule 39 (statement2 -> SEMICOLON .)
    READ            reduce using rule 39 (statement2 -> SEMICOLON .)
    RETURN          reduce using rule 39 (statement2 -> SEMICOLON .)
    IF              reduce using rule 39 (statement2 -> SEMICOLON .)
    LBRACE          reduce using rule 39 (statement2 -> SEMICOLON .)
    FOR             reduce using rule 39 (statement2 -> SEMICOLON .)
    WHILE           reduce using rule 39 (statement2 -> SEMICOLON .)
    RBRACE          reduce using rule 39 (statement2 -> SEMICOLON .)
    ELSE            reduce using rule 39 (statement2 -> SEMICOLON .)


state 65

    (35) statement1 -> LBRACKET numexpression . RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON

    RBRACKET        shift and go to state 103


state 66

    (36) statement1 -> ASSIGN atribstat1 . SEMICOLON

    SEMICOLON       shift and go to state 104


state 67

    (40) atribstat1 -> expression .

    SEMICOLON       reduce using rule 40 (atribstat1 -> expression .)
    RPAREN          reduce using rule 40 (atribstat1 -> expression .)


state 68

    (41) atribstat1 -> allocexpression .

    SEMICOLON       reduce using rule 41 (atribstat1 -> allocexpression .)
    RPAREN          reduce using rule 41 (atribstat1 -> allocexpression .)


state 69

    (42) atribstat1 -> funccall .

    SEMICOLON       reduce using rule 42 (atribstat1 -> funccall .)
    RPAREN          reduce using rule 42 (atribstat1 -> funccall .)


state 70

    (69) allocexpression -> NEW . types LBRACKET numexpression RBRACKET lvalue1
    (11) types -> . INT
    (12) types -> . FLOAT
    (13) types -> . STRING

    INT             shift and go to state 106
    FLOAT           shift and go to state 107
    STRING          shift and go to state 108

    types                          shift and go to state 105

state 71

    (43) funccall -> IDENT . LPAREN paramlistcall RPAREN
    (96) factor -> IDENT . lvalue1
    (98) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (99) lvalue1 -> .

    LPAREN          shift and go to state 109
    LBRACKET        shift and go to state 93
    MULTIPLY        reduce using rule 99 (lvalue1 -> .)
    DIVIDE          reduce using rule 99 (lvalue1 -> .)
    REM             reduce using rule 99 (lvalue1 -> .)
    PLUS            reduce using rule 99 (lvalue1 -> .)
    MINUS           reduce using rule 99 (lvalue1 -> .)
    GT              reduce using rule 99 (lvalue1 -> .)
    LT              reduce using rule 99 (lvalue1 -> .)
    GE              reduce using rule 99 (lvalue1 -> .)
    LE              reduce using rule 99 (lvalue1 -> .)
    EQ              reduce using rule 99 (lvalue1 -> .)
    NEQ             reduce using rule 99 (lvalue1 -> .)
    SEMICOLON       reduce using rule 99 (lvalue1 -> .)
    RPAREN          reduce using rule 99 (lvalue1 -> .)

    lvalue1                        shift and go to state 92

state 72

    (37) statement1 -> LPAREN paramlistcall . RPAREN SEMICOLON

    RPAREN          shift and go to state 110


state 73

    (44) paramlistcall -> factor . paramlistcall2
    (48) paramlistcall2 -> . LBRACKET numexpression RBRACKET lvalue1 paramlistcall1
    (49) paramlistcall2 -> . paramlistcall1
    (46) paramlistcall1 -> . COMMA paramlistcall
    (47) paramlistcall1 -> .

    LBRACKET        shift and go to state 112
    COMMA           shift and go to state 114
    RPAREN          reduce using rule 47 (paramlistcall1 -> .)

    paramlistcall2                 shift and go to state 111
    paramlistcall1                 shift and go to state 113

state 74

    (23) statement -> FLOAT IDENT statement2 .

    $end            reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    INT             reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    FLOAT           reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    STRING          reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    IDENT           reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    BREAK           reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    SEMICOLON       reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    PRINT           reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    READ            reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    RETURN          reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    IF              reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    LBRACE          reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    FOR             reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    WHILE           reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    RBRACE          reduce using rule 23 (statement -> FLOAT IDENT statement2 .)
    ELSE            reduce using rule 23 (statement -> FLOAT IDENT statement2 .)


state 75

    (24) statement -> STRING IDENT statement2 .

    $end            reduce using rule 24 (statement -> STRING IDENT statement2 .)
    INT             reduce using rule 24 (statement -> STRING IDENT statement2 .)
    FLOAT           reduce using rule 24 (statement -> STRING IDENT statement2 .)
    STRING          reduce using rule 24 (statement -> STRING IDENT statement2 .)
    IDENT           reduce using rule 24 (statement -> STRING IDENT statement2 .)
    BREAK           reduce using rule 24 (statement -> STRING IDENT statement2 .)
    SEMICOLON       reduce using rule 24 (statement -> STRING IDENT statement2 .)
    PRINT           reduce using rule 24 (statement -> STRING IDENT statement2 .)
    READ            reduce using rule 24 (statement -> STRING IDENT statement2 .)
    RETURN          reduce using rule 24 (statement -> STRING IDENT statement2 .)
    IF              reduce using rule 24 (statement -> STRING IDENT statement2 .)
    LBRACE          reduce using rule 24 (statement -> STRING IDENT statement2 .)
    FOR             reduce using rule 24 (statement -> STRING IDENT statement2 .)
    WHILE           reduce using rule 24 (statement -> STRING IDENT statement2 .)
    RBRACE          reduce using rule 24 (statement -> STRING IDENT statement2 .)
    ELSE            reduce using rule 24 (statement -> STRING IDENT statement2 .)


state 76

    (70) expression -> numexpression expression1 .

    SEMICOLON       reduce using rule 70 (expression -> numexpression expression1 .)
    RPAREN          reduce using rule 70 (expression -> numexpression expression1 .)


state 77

    (71) expression1 -> compoperator . numexpression
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 115
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 78

    (73) compoperator -> GT .

    PLUS            reduce using rule 73 (compoperator -> GT .)
    MINUS           reduce using rule 73 (compoperator -> GT .)
    int_constant    reduce using rule 73 (compoperator -> GT .)
    float_constant  reduce using rule 73 (compoperator -> GT .)
    string_constant reduce using rule 73 (compoperator -> GT .)
    null_constant   reduce using rule 73 (compoperator -> GT .)
    IDENT           reduce using rule 73 (compoperator -> GT .)
    LPAREN          reduce using rule 73 (compoperator -> GT .)


state 79

    (74) compoperator -> LT .

    PLUS            reduce using rule 74 (compoperator -> LT .)
    MINUS           reduce using rule 74 (compoperator -> LT .)
    int_constant    reduce using rule 74 (compoperator -> LT .)
    float_constant  reduce using rule 74 (compoperator -> LT .)
    string_constant reduce using rule 74 (compoperator -> LT .)
    null_constant   reduce using rule 74 (compoperator -> LT .)
    IDENT           reduce using rule 74 (compoperator -> LT .)
    LPAREN          reduce using rule 74 (compoperator -> LT .)


state 80

    (75) compoperator -> GE .

    PLUS            reduce using rule 75 (compoperator -> GE .)
    MINUS           reduce using rule 75 (compoperator -> GE .)
    int_constant    reduce using rule 75 (compoperator -> GE .)
    float_constant  reduce using rule 75 (compoperator -> GE .)
    string_constant reduce using rule 75 (compoperator -> GE .)
    null_constant   reduce using rule 75 (compoperator -> GE .)
    IDENT           reduce using rule 75 (compoperator -> GE .)
    LPAREN          reduce using rule 75 (compoperator -> GE .)


state 81

    (76) compoperator -> LE .

    PLUS            reduce using rule 76 (compoperator -> LE .)
    MINUS           reduce using rule 76 (compoperator -> LE .)
    int_constant    reduce using rule 76 (compoperator -> LE .)
    float_constant  reduce using rule 76 (compoperator -> LE .)
    string_constant reduce using rule 76 (compoperator -> LE .)
    null_constant   reduce using rule 76 (compoperator -> LE .)
    IDENT           reduce using rule 76 (compoperator -> LE .)
    LPAREN          reduce using rule 76 (compoperator -> LE .)


state 82

    (77) compoperator -> EQ .

    PLUS            reduce using rule 77 (compoperator -> EQ .)
    MINUS           reduce using rule 77 (compoperator -> EQ .)
    int_constant    reduce using rule 77 (compoperator -> EQ .)
    float_constant  reduce using rule 77 (compoperator -> EQ .)
    string_constant reduce using rule 77 (compoperator -> EQ .)
    null_constant   reduce using rule 77 (compoperator -> EQ .)
    IDENT           reduce using rule 77 (compoperator -> EQ .)
    LPAREN          reduce using rule 77 (compoperator -> EQ .)


state 83

    (78) compoperator -> NEQ .

    PLUS            reduce using rule 78 (compoperator -> NEQ .)
    MINUS           reduce using rule 78 (compoperator -> NEQ .)
    int_constant    reduce using rule 78 (compoperator -> NEQ .)
    float_constant  reduce using rule 78 (compoperator -> NEQ .)
    string_constant reduce using rule 78 (compoperator -> NEQ .)
    null_constant   reduce using rule 78 (compoperator -> NEQ .)
    IDENT           reduce using rule 78 (compoperator -> NEQ .)
    LPAREN          reduce using rule 78 (compoperator -> NEQ .)


state 84

    (79) numexpression -> term numexpression1 .

    GT              reduce using rule 79 (numexpression -> term numexpression1 .)
    LT              reduce using rule 79 (numexpression -> term numexpression1 .)
    GE              reduce using rule 79 (numexpression -> term numexpression1 .)
    LE              reduce using rule 79 (numexpression -> term numexpression1 .)
    EQ              reduce using rule 79 (numexpression -> term numexpression1 .)
    NEQ             reduce using rule 79 (numexpression -> term numexpression1 .)
    SEMICOLON       reduce using rule 79 (numexpression -> term numexpression1 .)
    RBRACKET        reduce using rule 79 (numexpression -> term numexpression1 .)
    RPAREN          reduce using rule 79 (numexpression -> term numexpression1 .)


state 85

    (80) numexpression1 -> addsub . term
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    addsub                         shift and go to state 43
    term                           shift and go to state 116
    unaryexpr                      shift and go to state 42
    factor                         shift and go to state 44

state 86

    (84) term -> unaryexpr term1 .

    PLUS            reduce using rule 84 (term -> unaryexpr term1 .)
    MINUS           reduce using rule 84 (term -> unaryexpr term1 .)
    GT              reduce using rule 84 (term -> unaryexpr term1 .)
    LT              reduce using rule 84 (term -> unaryexpr term1 .)
    GE              reduce using rule 84 (term -> unaryexpr term1 .)
    LE              reduce using rule 84 (term -> unaryexpr term1 .)
    EQ              reduce using rule 84 (term -> unaryexpr term1 .)
    NEQ             reduce using rule 84 (term -> unaryexpr term1 .)
    SEMICOLON       reduce using rule 84 (term -> unaryexpr term1 .)
    RBRACKET        reduce using rule 84 (term -> unaryexpr term1 .)
    RPAREN          reduce using rule 84 (term -> unaryexpr term1 .)


state 87

    (85) term1 -> multdiv . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    unaryexpr                      shift and go to state 117
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 88

    (87) multdiv -> MULTIPLY .

    PLUS            reduce using rule 87 (multdiv -> MULTIPLY .)
    MINUS           reduce using rule 87 (multdiv -> MULTIPLY .)
    int_constant    reduce using rule 87 (multdiv -> MULTIPLY .)
    float_constant  reduce using rule 87 (multdiv -> MULTIPLY .)
    string_constant reduce using rule 87 (multdiv -> MULTIPLY .)
    null_constant   reduce using rule 87 (multdiv -> MULTIPLY .)
    IDENT           reduce using rule 87 (multdiv -> MULTIPLY .)
    LPAREN          reduce using rule 87 (multdiv -> MULTIPLY .)


state 89

    (88) multdiv -> DIVIDE .

    PLUS            reduce using rule 88 (multdiv -> DIVIDE .)
    MINUS           reduce using rule 88 (multdiv -> DIVIDE .)
    int_constant    reduce using rule 88 (multdiv -> DIVIDE .)
    float_constant  reduce using rule 88 (multdiv -> DIVIDE .)
    string_constant reduce using rule 88 (multdiv -> DIVIDE .)
    null_constant   reduce using rule 88 (multdiv -> DIVIDE .)
    IDENT           reduce using rule 88 (multdiv -> DIVIDE .)
    LPAREN          reduce using rule 88 (multdiv -> DIVIDE .)


state 90

    (89) multdiv -> REM .

    PLUS            reduce using rule 89 (multdiv -> REM .)
    MINUS           reduce using rule 89 (multdiv -> REM .)
    int_constant    reduce using rule 89 (multdiv -> REM .)
    float_constant  reduce using rule 89 (multdiv -> REM .)
    string_constant reduce using rule 89 (multdiv -> REM .)
    null_constant   reduce using rule 89 (multdiv -> REM .)
    IDENT           reduce using rule 89 (multdiv -> REM .)
    LPAREN          reduce using rule 89 (multdiv -> REM .)


state 91

    (90) unaryexpr -> addsub factor .

    MULTIPLY        reduce using rule 90 (unaryexpr -> addsub factor .)
    DIVIDE          reduce using rule 90 (unaryexpr -> addsub factor .)
    REM             reduce using rule 90 (unaryexpr -> addsub factor .)
    PLUS            reduce using rule 90 (unaryexpr -> addsub factor .)
    MINUS           reduce using rule 90 (unaryexpr -> addsub factor .)
    GT              reduce using rule 90 (unaryexpr -> addsub factor .)
    LT              reduce using rule 90 (unaryexpr -> addsub factor .)
    GE              reduce using rule 90 (unaryexpr -> addsub factor .)
    LE              reduce using rule 90 (unaryexpr -> addsub factor .)
    EQ              reduce using rule 90 (unaryexpr -> addsub factor .)
    NEQ             reduce using rule 90 (unaryexpr -> addsub factor .)
    SEMICOLON       reduce using rule 90 (unaryexpr -> addsub factor .)
    RBRACKET        reduce using rule 90 (unaryexpr -> addsub factor .)
    RPAREN          reduce using rule 90 (unaryexpr -> addsub factor .)


state 92

    (96) factor -> IDENT lvalue1 .

    MULTIPLY        reduce using rule 96 (factor -> IDENT lvalue1 .)
    DIVIDE          reduce using rule 96 (factor -> IDENT lvalue1 .)
    REM             reduce using rule 96 (factor -> IDENT lvalue1 .)
    PLUS            reduce using rule 96 (factor -> IDENT lvalue1 .)
    MINUS           reduce using rule 96 (factor -> IDENT lvalue1 .)
    GT              reduce using rule 96 (factor -> IDENT lvalue1 .)
    LT              reduce using rule 96 (factor -> IDENT lvalue1 .)
    GE              reduce using rule 96 (factor -> IDENT lvalue1 .)
    LE              reduce using rule 96 (factor -> IDENT lvalue1 .)
    EQ              reduce using rule 96 (factor -> IDENT lvalue1 .)
    NEQ             reduce using rule 96 (factor -> IDENT lvalue1 .)
    SEMICOLON       reduce using rule 96 (factor -> IDENT lvalue1 .)
    RBRACKET        reduce using rule 96 (factor -> IDENT lvalue1 .)
    LBRACKET        reduce using rule 96 (factor -> IDENT lvalue1 .)
    COMMA           reduce using rule 96 (factor -> IDENT lvalue1 .)
    RPAREN          reduce using rule 96 (factor -> IDENT lvalue1 .)


state 93

    (98) lvalue1 -> LBRACKET . numexpression RBRACKET lvalue1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 118
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 94

    (97) factor -> LPAREN numexpression . RPAREN

    RPAREN          shift and go to state 119


state 95

    (55) ifstat -> IF LPAREN expression . RPAREN statement ifstat1

    RPAREN          shift and go to state 120


state 96

    (58) forstat -> new_loop_label FOR LPAREN . forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (59) forstat1 -> . IDENT forstat3
    (60) forstat1 -> .

    IDENT           shift and go to state 122
    SEMICOLON       reduce using rule 60 (forstat1 -> .)

    forstat1                       shift and go to state 121

state 97

    (65) whilestat -> new_loop_label WHILE LPAREN . expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (70) expression -> . numexpression expression1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    expression                     shift and go to state 123
    numexpression                  shift and go to state 40
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 98

    (10) funcdef -> DEF IDENT new_scope . LPAREN paramlist RPAREN LBRACE statelist RBRACE

    LPAREN          shift and go to state 124


state 99

    (32) statement -> new_scope LBRACE statelist RBRACE .

    $end            reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    INT             reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    FLOAT           reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    STRING          reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    IDENT           reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    BREAK           reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    SEMICOLON       reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    PRINT           reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    READ            reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    RETURN          reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    IF              reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    LBRACE          reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    FOR             reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    WHILE           reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    RBRACE          reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)
    ELSE            reduce using rule 32 (statement -> new_scope LBRACE statelist RBRACE .)


state 100

    (66) statelist -> statement statelist1 .

    RBRACE          reduce using rule 66 (statelist -> statement statelist1 .)


state 101

    (67) statelist1 -> statelist .

    RBRACE          reduce using rule 67 (statelist1 -> statelist .)


state 102

    (38) statement2 -> LBRACKET numexpression . RBRACKET lvalue1 SEMICOLON

    RBRACKET        shift and go to state 125


state 103

    (35) statement1 -> LBRACKET numexpression RBRACKET . lvalue1 ASSIGN atribstat1 SEMICOLON
    (98) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (99) lvalue1 -> .

    LBRACKET        shift and go to state 93
    ASSIGN          reduce using rule 99 (lvalue1 -> .)

    lvalue1                        shift and go to state 126

state 104

    (36) statement1 -> ASSIGN atribstat1 SEMICOLON .

    $end            reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    INT             reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    FLOAT           reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    STRING          reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    IDENT           reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    BREAK           reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    SEMICOLON       reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    PRINT           reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    READ            reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    RETURN          reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    IF              reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    LBRACE          reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    FOR             reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    WHILE           reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    RBRACE          reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    ELSE            reduce using rule 36 (statement1 -> ASSIGN atribstat1 SEMICOLON .)


state 105

    (69) allocexpression -> NEW types . LBRACKET numexpression RBRACKET lvalue1

    LBRACKET        shift and go to state 127


state 106

    (11) types -> INT .

    LBRACKET        reduce using rule 11 (types -> INT .)


state 107

    (12) types -> FLOAT .

    LBRACKET        reduce using rule 12 (types -> FLOAT .)


state 108

    (13) types -> STRING .

    LBRACKET        reduce using rule 13 (types -> STRING .)


state 109

    (43) funccall -> IDENT LPAREN . paramlistcall RPAREN
    (44) paramlistcall -> . factor paramlistcall2
    (45) paramlistcall -> .
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    RPAREN          reduce using rule 45 (paramlistcall -> .)
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    paramlistcall                  shift and go to state 128
    factor                         shift and go to state 73

state 110

    (37) statement1 -> LPAREN paramlistcall RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 129


state 111

    (44) paramlistcall -> factor paramlistcall2 .

    RPAREN          reduce using rule 44 (paramlistcall -> factor paramlistcall2 .)


state 112

    (48) paramlistcall2 -> LBRACKET . numexpression RBRACKET lvalue1 paramlistcall1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 130
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 113

    (49) paramlistcall2 -> paramlistcall1 .

    RPAREN          reduce using rule 49 (paramlistcall2 -> paramlistcall1 .)


state 114

    (46) paramlistcall1 -> COMMA . paramlistcall
    (44) paramlistcall -> . factor paramlistcall2
    (45) paramlistcall -> .
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    RPAREN          reduce using rule 45 (paramlistcall -> .)
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    paramlistcall                  shift and go to state 131
    factor                         shift and go to state 73

state 115

    (71) expression1 -> compoperator numexpression .

    SEMICOLON       reduce using rule 71 (expression1 -> compoperator numexpression .)
    RPAREN          reduce using rule 71 (expression1 -> compoperator numexpression .)


state 116

    (80) numexpression1 -> addsub term .

    GT              reduce using rule 80 (numexpression1 -> addsub term .)
    LT              reduce using rule 80 (numexpression1 -> addsub term .)
    GE              reduce using rule 80 (numexpression1 -> addsub term .)
    LE              reduce using rule 80 (numexpression1 -> addsub term .)
    EQ              reduce using rule 80 (numexpression1 -> addsub term .)
    NEQ             reduce using rule 80 (numexpression1 -> addsub term .)
    SEMICOLON       reduce using rule 80 (numexpression1 -> addsub term .)
    RBRACKET        reduce using rule 80 (numexpression1 -> addsub term .)
    RPAREN          reduce using rule 80 (numexpression1 -> addsub term .)


state 117

    (85) term1 -> multdiv unaryexpr . term1
    (85) term1 -> . multdiv unaryexpr term1
    (86) term1 -> .
    (87) multdiv -> . MULTIPLY
    (88) multdiv -> . DIVIDE
    (89) multdiv -> . REM

    PLUS            reduce using rule 86 (term1 -> .)
    MINUS           reduce using rule 86 (term1 -> .)
    GT              reduce using rule 86 (term1 -> .)
    LT              reduce using rule 86 (term1 -> .)
    GE              reduce using rule 86 (term1 -> .)
    LE              reduce using rule 86 (term1 -> .)
    EQ              reduce using rule 86 (term1 -> .)
    NEQ             reduce using rule 86 (term1 -> .)
    SEMICOLON       reduce using rule 86 (term1 -> .)
    RBRACKET        reduce using rule 86 (term1 -> .)
    RPAREN          reduce using rule 86 (term1 -> .)
    MULTIPLY        shift and go to state 88
    DIVIDE          shift and go to state 89
    REM             shift and go to state 90

    multdiv                        shift and go to state 87
    term1                          shift and go to state 132

state 118

    (98) lvalue1 -> LBRACKET numexpression . RBRACKET lvalue1

    RBRACKET        shift and go to state 133


state 119

    (97) factor -> LPAREN numexpression RPAREN .

    MULTIPLY        reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    DIVIDE          reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    REM             reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    PLUS            reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    MINUS           reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    GT              reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    LT              reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    GE              reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    LE              reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    EQ              reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    NEQ             reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    SEMICOLON       reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    RBRACKET        reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    LBRACKET        reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    COMMA           reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)
    RPAREN          reduce using rule 97 (factor -> LPAREN numexpression RPAREN .)


state 120

    (55) ifstat -> IF LPAREN expression RPAREN . statement ifstat1
    (22) statement -> . INT IDENT statement2
    (23) statement -> . FLOAT IDENT statement2
    (24) statement -> . STRING IDENT statement2
    (25) statement -> . IDENT statement1
    (26) statement -> . printstat SEMICOLON
    (27) statement -> . readstat SEMICOLON
    (28) statement -> . returnstat SEMICOLON
    (29) statement -> . ifstat
    (30) statement -> . forstat
    (31) statement -> . whilestat
    (32) statement -> . new_scope LBRACE statelist RBRACE
    (33) statement -> . BREAK SEMICOLON
    (34) statement -> . SEMICOLON
    (50) printstat -> . PRINT expression
    (51) readstat -> . READ expression
    (52) returnstat -> . RETURN returnstat1
    (55) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (58) forstat -> . new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> . new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (2) new_scope -> .
    (1) new_loop_label -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    LBRACE          reduce using rule 2 (new_scope -> .)
    FOR             reduce using rule 1 (new_loop_label -> .)
    WHILE           reduce using rule 1 (new_loop_label -> .)

    statement                      shift and go to state 134
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3
    new_loop_label                 shift and go to state 23

state 121

    (58) forstat -> new_loop_label FOR LPAREN forstat1 . SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE

    SEMICOLON       shift and go to state 135


state 122

    (59) forstat1 -> IDENT . forstat3
    (63) forstat3 -> . LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1
    (64) forstat3 -> . ASSIGN atribstat1

    LBRACKET        shift and go to state 137
    ASSIGN          shift and go to state 138

    forstat3                       shift and go to state 136

state 123

    (65) whilestat -> new_loop_label WHILE LPAREN expression . RPAREN new_scope_loop LBRACE statelist RBRACE

    RPAREN          shift and go to state 139


state 124

    (10) funcdef -> DEF IDENT new_scope LPAREN . paramlist RPAREN LBRACE statelist RBRACE
    (14) paramlist -> . STRING listdcl IDENT paramlist1
    (15) paramlist -> . FLOAT listdcl IDENT paramlist1
    (16) paramlist -> . INT listdcl IDENT paramlist1
    (17) paramlist -> .

    STRING          shift and go to state 141
    FLOAT           shift and go to state 142
    INT             shift and go to state 143
    RPAREN          reduce using rule 17 (paramlist -> .)

    paramlist                      shift and go to state 140

state 125

    (38) statement2 -> LBRACKET numexpression RBRACKET . lvalue1 SEMICOLON
    (98) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (99) lvalue1 -> .

    LBRACKET        shift and go to state 93
    SEMICOLON       reduce using rule 99 (lvalue1 -> .)

    lvalue1                        shift and go to state 144

state 126

    (35) statement1 -> LBRACKET numexpression RBRACKET lvalue1 . ASSIGN atribstat1 SEMICOLON

    ASSIGN          shift and go to state 145


state 127

    (69) allocexpression -> NEW types LBRACKET . numexpression RBRACKET lvalue1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 146
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 128

    (43) funccall -> IDENT LPAREN paramlistcall . RPAREN

    RPAREN          shift and go to state 147


state 129

    (37) statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .

    $end            reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    INT             reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    FLOAT           reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    STRING          reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    IDENT           reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    BREAK           reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    PRINT           reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    READ            reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    RETURN          reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    IF              reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    LBRACE          reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    FOR             reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    WHILE           reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    RBRACE          reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    ELSE            reduce using rule 37 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)


state 130

    (48) paramlistcall2 -> LBRACKET numexpression . RBRACKET lvalue1 paramlistcall1

    RBRACKET        shift and go to state 148


state 131

    (46) paramlistcall1 -> COMMA paramlistcall .

    RPAREN          reduce using rule 46 (paramlistcall1 -> COMMA paramlistcall .)


state 132

    (85) term1 -> multdiv unaryexpr term1 .

    PLUS            reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    MINUS           reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    GT              reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    LT              reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    GE              reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    LE              reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    EQ              reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    NEQ             reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    SEMICOLON       reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    RBRACKET        reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)
    RPAREN          reduce using rule 85 (term1 -> multdiv unaryexpr term1 .)


state 133

    (98) lvalue1 -> LBRACKET numexpression RBRACKET . lvalue1
    (98) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (99) lvalue1 -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 93
    MULTIPLY        reduce using rule 99 (lvalue1 -> .)
    DIVIDE          reduce using rule 99 (lvalue1 -> .)
    REM             reduce using rule 99 (lvalue1 -> .)
    PLUS            reduce using rule 99 (lvalue1 -> .)
    MINUS           reduce using rule 99 (lvalue1 -> .)
    GT              reduce using rule 99 (lvalue1 -> .)
    LT              reduce using rule 99 (lvalue1 -> .)
    GE              reduce using rule 99 (lvalue1 -> .)
    LE              reduce using rule 99 (lvalue1 -> .)
    EQ              reduce using rule 99 (lvalue1 -> .)
    NEQ             reduce using rule 99 (lvalue1 -> .)
    SEMICOLON       reduce using rule 99 (lvalue1 -> .)
    RBRACKET        reduce using rule 99 (lvalue1 -> .)
    COMMA           reduce using rule 99 (lvalue1 -> .)
    RPAREN          reduce using rule 99 (lvalue1 -> .)
    ASSIGN          reduce using rule 99 (lvalue1 -> .)

  ! LBRACKET        [ reduce using rule 99 (lvalue1 -> .) ]

    lvalue1                        shift and go to state 149

state 134

    (55) ifstat -> IF LPAREN expression RPAREN statement . ifstat1
    (56) ifstat1 -> . ELSE statement
    (57) ifstat1 -> .

    ELSE            shift and go to state 151
    $end            reduce using rule 57 (ifstat1 -> .)
    INT             reduce using rule 57 (ifstat1 -> .)
    FLOAT           reduce using rule 57 (ifstat1 -> .)
    STRING          reduce using rule 57 (ifstat1 -> .)
    IDENT           reduce using rule 57 (ifstat1 -> .)
    BREAK           reduce using rule 57 (ifstat1 -> .)
    SEMICOLON       reduce using rule 57 (ifstat1 -> .)
    PRINT           reduce using rule 57 (ifstat1 -> .)
    READ            reduce using rule 57 (ifstat1 -> .)
    RETURN          reduce using rule 57 (ifstat1 -> .)
    IF              reduce using rule 57 (ifstat1 -> .)
    LBRACE          reduce using rule 57 (ifstat1 -> .)
    FOR             reduce using rule 57 (ifstat1 -> .)
    WHILE           reduce using rule 57 (ifstat1 -> .)
    RBRACE          reduce using rule 57 (ifstat1 -> .)

  ! ELSE            [ reduce using rule 57 (ifstat1 -> .) ]

    ifstat1                        shift and go to state 150

state 135

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON . forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (61) forstat2 -> . expression
    (62) forstat2 -> .
    (70) expression -> . numexpression expression1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    SEMICOLON       reduce using rule 62 (forstat2 -> .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    forstat2                       shift and go to state 152
    expression                     shift and go to state 153
    numexpression                  shift and go to state 40
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 136

    (59) forstat1 -> IDENT forstat3 .

    SEMICOLON       reduce using rule 59 (forstat1 -> IDENT forstat3 .)
    RPAREN          reduce using rule 59 (forstat1 -> IDENT forstat3 .)


state 137

    (63) forstat3 -> LBRACKET . numexpression RBRACKET lvalue1 ASSIGN atribstat1
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    IDENT           shift and go to state 51
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 154
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 138

    (64) forstat3 -> ASSIGN . atribstat1
    (40) atribstat1 -> . expression
    (41) atribstat1 -> . allocexpression
    (42) atribstat1 -> . funccall
    (70) expression -> . numexpression expression1
    (69) allocexpression -> . NEW types LBRACKET numexpression RBRACKET lvalue1
    (43) funccall -> . IDENT LPAREN paramlistcall RPAREN
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    NEW             shift and go to state 70
    IDENT           shift and go to state 71
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    LPAREN          shift and go to state 52

    atribstat1                     shift and go to state 155
    expression                     shift and go to state 67
    allocexpression                shift and go to state 68
    funccall                       shift and go to state 69
    numexpression                  shift and go to state 40
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 139

    (65) whilestat -> new_loop_label WHILE LPAREN expression RPAREN . new_scope_loop LBRACE statelist RBRACE
    (3) new_scope_loop -> .

    LBRACE          reduce using rule 3 (new_scope_loop -> .)

    new_scope_loop                 shift and go to state 156

state 140

    (10) funcdef -> DEF IDENT new_scope LPAREN paramlist . RPAREN LBRACE statelist RBRACE

    RPAREN          shift and go to state 157


state 141

    (14) paramlist -> STRING . listdcl IDENT paramlist1
    (20) listdcl -> . LBRACKET RBRACKET listdcl
    (21) listdcl -> .

    LBRACKET        shift and go to state 159
    IDENT           reduce using rule 21 (listdcl -> .)

    listdcl                        shift and go to state 158

state 142

    (15) paramlist -> FLOAT . listdcl IDENT paramlist1
    (20) listdcl -> . LBRACKET RBRACKET listdcl
    (21) listdcl -> .

    LBRACKET        shift and go to state 159
    IDENT           reduce using rule 21 (listdcl -> .)

    listdcl                        shift and go to state 160

state 143

    (16) paramlist -> INT . listdcl IDENT paramlist1
    (20) listdcl -> . LBRACKET RBRACKET listdcl
    (21) listdcl -> .

    LBRACKET        shift and go to state 159
    IDENT           reduce using rule 21 (listdcl -> .)

    listdcl                        shift and go to state 161

state 144

    (38) statement2 -> LBRACKET numexpression RBRACKET lvalue1 . SEMICOLON

    SEMICOLON       shift and go to state 162


state 145

    (35) statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN . atribstat1 SEMICOLON
    (40) atribstat1 -> . expression
    (41) atribstat1 -> . allocexpression
    (42) atribstat1 -> . funccall
    (70) expression -> . numexpression expression1
    (69) allocexpression -> . NEW types LBRACKET numexpression RBRACKET lvalue1
    (43) funccall -> . IDENT LPAREN paramlistcall RPAREN
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    NEW             shift and go to state 70
    IDENT           shift and go to state 71
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 40
    atribstat1                     shift and go to state 163
    expression                     shift and go to state 67
    allocexpression                shift and go to state 68
    funccall                       shift and go to state 69
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 146

    (69) allocexpression -> NEW types LBRACKET numexpression . RBRACKET lvalue1

    RBRACKET        shift and go to state 164


state 147

    (43) funccall -> IDENT LPAREN paramlistcall RPAREN .

    SEMICOLON       reduce using rule 43 (funccall -> IDENT LPAREN paramlistcall RPAREN .)
    RPAREN          reduce using rule 43 (funccall -> IDENT LPAREN paramlistcall RPAREN .)


state 148

    (48) paramlistcall2 -> LBRACKET numexpression RBRACKET . lvalue1 paramlistcall1
    (98) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (99) lvalue1 -> .

    LBRACKET        shift and go to state 93
    COMMA           reduce using rule 99 (lvalue1 -> .)
    RPAREN          reduce using rule 99 (lvalue1 -> .)

    lvalue1                        shift and go to state 165

state 149

    (98) lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .

    MULTIPLY        reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    DIVIDE          reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    REM             reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    PLUS            reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    MINUS           reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    GT              reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    LT              reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    GE              reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    LE              reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    EQ              reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    NEQ             reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    SEMICOLON       reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    RBRACKET        reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    LBRACKET        reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    COMMA           reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    RPAREN          reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    ASSIGN          reduce using rule 98 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)


state 150

    (55) ifstat -> IF LPAREN expression RPAREN statement ifstat1 .

    $end            reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    INT             reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    FLOAT           reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    STRING          reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    IDENT           reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    BREAK           reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    SEMICOLON       reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    PRINT           reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    READ            reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    RETURN          reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    IF              reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    LBRACE          reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    FOR             reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    WHILE           reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    RBRACE          reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    ELSE            reduce using rule 55 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)


state 151

    (56) ifstat1 -> ELSE . statement
    (22) statement -> . INT IDENT statement2
    (23) statement -> . FLOAT IDENT statement2
    (24) statement -> . STRING IDENT statement2
    (25) statement -> . IDENT statement1
    (26) statement -> . printstat SEMICOLON
    (27) statement -> . readstat SEMICOLON
    (28) statement -> . returnstat SEMICOLON
    (29) statement -> . ifstat
    (30) statement -> . forstat
    (31) statement -> . whilestat
    (32) statement -> . new_scope LBRACE statelist RBRACE
    (33) statement -> . BREAK SEMICOLON
    (34) statement -> . SEMICOLON
    (50) printstat -> . PRINT expression
    (51) readstat -> . READ expression
    (52) returnstat -> . RETURN returnstat1
    (55) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (58) forstat -> . new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> . new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (2) new_scope -> .
    (1) new_loop_label -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    LBRACE          reduce using rule 2 (new_scope -> .)
    FOR             reduce using rule 1 (new_loop_label -> .)
    WHILE           reduce using rule 1 (new_loop_label -> .)

    statement                      shift and go to state 166
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3
    new_loop_label                 shift and go to state 23

state 152

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 . SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE

    SEMICOLON       shift and go to state 167


state 153

    (61) forstat2 -> expression .

    SEMICOLON       reduce using rule 61 (forstat2 -> expression .)


state 154

    (63) forstat3 -> LBRACKET numexpression . RBRACKET lvalue1 ASSIGN atribstat1

    RBRACKET        shift and go to state 168


state 155

    (64) forstat3 -> ASSIGN atribstat1 .

    SEMICOLON       reduce using rule 64 (forstat3 -> ASSIGN atribstat1 .)
    RPAREN          reduce using rule 64 (forstat3 -> ASSIGN atribstat1 .)


state 156

    (65) whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop . LBRACE statelist RBRACE

    LBRACE          shift and go to state 169


state 157

    (10) funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN . LBRACE statelist RBRACE

    LBRACE          shift and go to state 170


state 158

    (14) paramlist -> STRING listdcl . IDENT paramlist1

    IDENT           shift and go to state 171


state 159

    (20) listdcl -> LBRACKET . RBRACKET listdcl

    RBRACKET        shift and go to state 172


state 160

    (15) paramlist -> FLOAT listdcl . IDENT paramlist1

    IDENT           shift and go to state 173


state 161

    (16) paramlist -> INT listdcl . IDENT paramlist1

    IDENT           shift and go to state 174


state 162

    (38) statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .

    $end            reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    INT             reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    FLOAT           reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    STRING          reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    IDENT           reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    BREAK           reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    SEMICOLON       reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    PRINT           reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    READ            reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    RETURN          reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    IF              reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    LBRACE          reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    FOR             reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    WHILE           reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    RBRACE          reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    ELSE            reduce using rule 38 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)


state 163

    (35) statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 . SEMICOLON

    SEMICOLON       shift and go to state 175


state 164

    (69) allocexpression -> NEW types LBRACKET numexpression RBRACKET . lvalue1
    (98) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (99) lvalue1 -> .

    LBRACKET        shift and go to state 93
    SEMICOLON       reduce using rule 99 (lvalue1 -> .)
    RPAREN          reduce using rule 99 (lvalue1 -> .)

    lvalue1                        shift and go to state 176

state 165

    (48) paramlistcall2 -> LBRACKET numexpression RBRACKET lvalue1 . paramlistcall1
    (46) paramlistcall1 -> . COMMA paramlistcall
    (47) paramlistcall1 -> .

    COMMA           shift and go to state 114
    RPAREN          reduce using rule 47 (paramlistcall1 -> .)

    paramlistcall1                 shift and go to state 177

state 166

    (56) ifstat1 -> ELSE statement .

    ELSE            reduce using rule 56 (ifstat1 -> ELSE statement .)
    $end            reduce using rule 56 (ifstat1 -> ELSE statement .)
    INT             reduce using rule 56 (ifstat1 -> ELSE statement .)
    FLOAT           reduce using rule 56 (ifstat1 -> ELSE statement .)
    STRING          reduce using rule 56 (ifstat1 -> ELSE statement .)
    IDENT           reduce using rule 56 (ifstat1 -> ELSE statement .)
    BREAK           reduce using rule 56 (ifstat1 -> ELSE statement .)
    SEMICOLON       reduce using rule 56 (ifstat1 -> ELSE statement .)
    PRINT           reduce using rule 56 (ifstat1 -> ELSE statement .)
    READ            reduce using rule 56 (ifstat1 -> ELSE statement .)
    RETURN          reduce using rule 56 (ifstat1 -> ELSE statement .)
    IF              reduce using rule 56 (ifstat1 -> ELSE statement .)
    LBRACE          reduce using rule 56 (ifstat1 -> ELSE statement .)
    FOR             reduce using rule 56 (ifstat1 -> ELSE statement .)
    WHILE           reduce using rule 56 (ifstat1 -> ELSE statement .)
    RBRACE          reduce using rule 56 (ifstat1 -> ELSE statement .)


state 167

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON . forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (59) forstat1 -> . IDENT forstat3
    (60) forstat1 -> .

    IDENT           shift and go to state 122
    RPAREN          reduce using rule 60 (forstat1 -> .)

    forstat1                       shift and go to state 178

state 168

    (63) forstat3 -> LBRACKET numexpression RBRACKET . lvalue1 ASSIGN atribstat1
    (98) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (99) lvalue1 -> .

    LBRACKET        shift and go to state 93
    ASSIGN          reduce using rule 99 (lvalue1 -> .)

    lvalue1                        shift and go to state 179

state 169

    (65) whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE . statelist RBRACE
    (66) statelist -> . statement statelist1
    (22) statement -> . INT IDENT statement2
    (23) statement -> . FLOAT IDENT statement2
    (24) statement -> . STRING IDENT statement2
    (25) statement -> . IDENT statement1
    (26) statement -> . printstat SEMICOLON
    (27) statement -> . readstat SEMICOLON
    (28) statement -> . returnstat SEMICOLON
    (29) statement -> . ifstat
    (30) statement -> . forstat
    (31) statement -> . whilestat
    (32) statement -> . new_scope LBRACE statelist RBRACE
    (33) statement -> . BREAK SEMICOLON
    (34) statement -> . SEMICOLON
    (50) printstat -> . PRINT expression
    (51) readstat -> . READ expression
    (52) returnstat -> . RETURN returnstat1
    (55) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (58) forstat -> . new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> . new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (2) new_scope -> .
    (1) new_loop_label -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    LBRACE          reduce using rule 2 (new_scope -> .)
    FOR             reduce using rule 1 (new_loop_label -> .)
    WHILE           reduce using rule 1 (new_loop_label -> .)

    new_loop_label                 shift and go to state 23
    statelist                      shift and go to state 180
    statement                      shift and go to state 61
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3

state 170

    (10) funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE . statelist RBRACE
    (66) statelist -> . statement statelist1
    (22) statement -> . INT IDENT statement2
    (23) statement -> . FLOAT IDENT statement2
    (24) statement -> . STRING IDENT statement2
    (25) statement -> . IDENT statement1
    (26) statement -> . printstat SEMICOLON
    (27) statement -> . readstat SEMICOLON
    (28) statement -> . returnstat SEMICOLON
    (29) statement -> . ifstat
    (30) statement -> . forstat
    (31) statement -> . whilestat
    (32) statement -> . new_scope LBRACE statelist RBRACE
    (33) statement -> . BREAK SEMICOLON
    (34) statement -> . SEMICOLON
    (50) printstat -> . PRINT expression
    (51) readstat -> . READ expression
    (52) returnstat -> . RETURN returnstat1
    (55) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (58) forstat -> . new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> . new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (2) new_scope -> .
    (1) new_loop_label -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    LBRACE          reduce using rule 2 (new_scope -> .)
    FOR             reduce using rule 1 (new_loop_label -> .)
    WHILE           reduce using rule 1 (new_loop_label -> .)

    new_scope                      shift and go to state 3
    statelist                      shift and go to state 181
    statement                      shift and go to state 61
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_loop_label                 shift and go to state 23

state 171

    (14) paramlist -> STRING listdcl IDENT . paramlist1
    (18) paramlist1 -> . COMMA paramlist
    (19) paramlist1 -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 19 (paramlist1 -> .)

    paramlist1                     shift and go to state 182

state 172

    (20) listdcl -> LBRACKET RBRACKET . listdcl
    (20) listdcl -> . LBRACKET RBRACKET listdcl
    (21) listdcl -> .

    LBRACKET        shift and go to state 159
    IDENT           reduce using rule 21 (listdcl -> .)

    listdcl                        shift and go to state 184

state 173

    (15) paramlist -> FLOAT listdcl IDENT . paramlist1
    (18) paramlist1 -> . COMMA paramlist
    (19) paramlist1 -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 19 (paramlist1 -> .)

    paramlist1                     shift and go to state 185

state 174

    (16) paramlist -> INT listdcl IDENT . paramlist1
    (18) paramlist1 -> . COMMA paramlist
    (19) paramlist1 -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 19 (paramlist1 -> .)

    paramlist1                     shift and go to state 186

state 175

    (35) statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .

    $end            reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    INT             reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    FLOAT           reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    STRING          reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    IDENT           reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    BREAK           reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    SEMICOLON       reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    PRINT           reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    READ            reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    RETURN          reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    IF              reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    LBRACE          reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    FOR             reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    WHILE           reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    RBRACE          reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    ELSE            reduce using rule 35 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)


state 176

    (69) allocexpression -> NEW types LBRACKET numexpression RBRACKET lvalue1 .

    SEMICOLON       reduce using rule 69 (allocexpression -> NEW types LBRACKET numexpression RBRACKET lvalue1 .)
    RPAREN          reduce using rule 69 (allocexpression -> NEW types LBRACKET numexpression RBRACKET lvalue1 .)


state 177

    (48) paramlistcall2 -> LBRACKET numexpression RBRACKET lvalue1 paramlistcall1 .

    RPAREN          reduce using rule 48 (paramlistcall2 -> LBRACKET numexpression RBRACKET lvalue1 paramlistcall1 .)


state 178

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 . RPAREN new_scope_loop LBRACE statelist RBRACE

    RPAREN          shift and go to state 187


state 179

    (63) forstat3 -> LBRACKET numexpression RBRACKET lvalue1 . ASSIGN atribstat1

    ASSIGN          shift and go to state 188


state 180

    (65) whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist . RBRACE

    RBRACE          shift and go to state 189


state 181

    (10) funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist . RBRACE

    RBRACE          shift and go to state 190


state 182

    (14) paramlist -> STRING listdcl IDENT paramlist1 .

    RPAREN          reduce using rule 14 (paramlist -> STRING listdcl IDENT paramlist1 .)


state 183

    (18) paramlist1 -> COMMA . paramlist
    (14) paramlist -> . STRING listdcl IDENT paramlist1
    (15) paramlist -> . FLOAT listdcl IDENT paramlist1
    (16) paramlist -> . INT listdcl IDENT paramlist1
    (17) paramlist -> .

    STRING          shift and go to state 141
    FLOAT           shift and go to state 142
    INT             shift and go to state 143
    RPAREN          reduce using rule 17 (paramlist -> .)

    paramlist                      shift and go to state 191

state 184

    (20) listdcl -> LBRACKET RBRACKET listdcl .

    IDENT           reduce using rule 20 (listdcl -> LBRACKET RBRACKET listdcl .)


state 185

    (15) paramlist -> FLOAT listdcl IDENT paramlist1 .

    RPAREN          reduce using rule 15 (paramlist -> FLOAT listdcl IDENT paramlist1 .)


state 186

    (16) paramlist -> INT listdcl IDENT paramlist1 .

    RPAREN          reduce using rule 16 (paramlist -> INT listdcl IDENT paramlist1 .)


state 187

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN . new_scope_loop LBRACE statelist RBRACE
    (3) new_scope_loop -> .

    LBRACE          reduce using rule 3 (new_scope_loop -> .)

    new_scope_loop                 shift and go to state 192

state 188

    (63) forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN . atribstat1
    (40) atribstat1 -> . expression
    (41) atribstat1 -> . allocexpression
    (42) atribstat1 -> . funccall
    (70) expression -> . numexpression expression1
    (69) allocexpression -> . NEW types LBRACKET numexpression RBRACKET lvalue1
    (43) funccall -> . IDENT LPAREN paramlistcall RPAREN
    (79) numexpression -> . term numexpression1
    (84) term -> . unaryexpr term1
    (90) unaryexpr -> . addsub factor
    (91) unaryexpr -> . factor
    (82) addsub -> . PLUS
    (83) addsub -> . MINUS
    (92) factor -> . int_constant
    (93) factor -> . float_constant
    (94) factor -> . string_constant
    (95) factor -> . null_constant
    (96) factor -> . IDENT lvalue1
    (97) factor -> . LPAREN numexpression RPAREN

    NEW             shift and go to state 70
    IDENT           shift and go to state 71
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    int_constant    shift and go to state 47
    float_constant  shift and go to state 48
    string_constant shift and go to state 49
    null_constant   shift and go to state 50
    LPAREN          shift and go to state 52

    numexpression                  shift and go to state 40
    atribstat1                     shift and go to state 193
    expression                     shift and go to state 67
    allocexpression                shift and go to state 68
    funccall                       shift and go to state 69
    term                           shift and go to state 41
    unaryexpr                      shift and go to state 42
    addsub                         shift and go to state 43
    factor                         shift and go to state 44

state 189

    (65) whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .

    $end            reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    INT             reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    FLOAT           reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    STRING          reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    IDENT           reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    BREAK           reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    SEMICOLON       reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    PRINT           reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    READ            reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    RETURN          reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    IF              reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    LBRACE          reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    FOR             reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    WHILE           reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    RBRACE          reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)
    ELSE            reduce using rule 65 (whilestat -> new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE .)


state 190

    (10) funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE .

    DEF             reduce using rule 10 (funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE .)
    $end            reduce using rule 10 (funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE .)


state 191

    (18) paramlist1 -> COMMA paramlist .

    RPAREN          reduce using rule 18 (paramlist1 -> COMMA paramlist .)


state 192

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop . LBRACE statelist RBRACE

    LBRACE          shift and go to state 194


state 193

    (63) forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 .

    SEMICOLON       reduce using rule 63 (forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 .)
    RPAREN          reduce using rule 63 (forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 .)


state 194

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE . statelist RBRACE
    (66) statelist -> . statement statelist1
    (22) statement -> . INT IDENT statement2
    (23) statement -> . FLOAT IDENT statement2
    (24) statement -> . STRING IDENT statement2
    (25) statement -> . IDENT statement1
    (26) statement -> . printstat SEMICOLON
    (27) statement -> . readstat SEMICOLON
    (28) statement -> . returnstat SEMICOLON
    (29) statement -> . ifstat
    (30) statement -> . forstat
    (31) statement -> . whilestat
    (32) statement -> . new_scope LBRACE statelist RBRACE
    (33) statement -> . BREAK SEMICOLON
    (34) statement -> . SEMICOLON
    (50) printstat -> . PRINT expression
    (51) readstat -> . READ expression
    (52) returnstat -> . RETURN returnstat1
    (55) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (58) forstat -> . new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (65) whilestat -> . new_loop_label WHILE LPAREN expression RPAREN new_scope_loop LBRACE statelist RBRACE
    (2) new_scope -> .
    (1) new_loop_label -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    LBRACE          reduce using rule 2 (new_scope -> .)
    FOR             reduce using rule 1 (new_loop_label -> .)
    WHILE           reduce using rule 1 (new_loop_label -> .)

    new_loop_label                 shift and go to state 23
    statelist                      shift and go to state 195
    statement                      shift and go to state 61
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3

state 195

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist . RBRACE

    RBRACE          shift and go to state 196


state 196

    (58) forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .

    $end            reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    INT             reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    FLOAT           reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    STRING          reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    IDENT           reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    BREAK           reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    SEMICOLON       reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    PRINT           reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    READ            reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    RETURN          reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    IF              reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    LBRACE          reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    FOR             reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    WHILE           reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    RBRACE          reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    ELSE            reduce using rule 58 (forstat -> new_loop_label FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 51 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 133 resolved as shift
