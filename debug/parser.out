Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     new_scope -> <empty>
Rule 2     new_scope_loop -> <empty>
Rule 3     program -> new_scope statement
Rule 4     program -> new_scope funclist
Rule 5     program -> <empty>
Rule 6     funclist -> funcdef funclist1
Rule 7     funclist1 -> DEF IDENT LPAREN paramlist RPAREN LBRACE statelist RBRACE funclist1
Rule 8     funclist1 -> <empty>
Rule 9     funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE
Rule 10    types -> INT
Rule 11    types -> FLOAT
Rule 12    types -> STRING
Rule 13    paramlist -> STRING listdcl IDENT paramlist1
Rule 14    paramlist -> FLOAT listdcl IDENT paramlist1
Rule 15    paramlist -> INT listdcl IDENT paramlist1
Rule 16    paramlist -> <empty>
Rule 17    paramlist1 -> COMMA paramlist
Rule 18    paramlist1 -> <empty>
Rule 19    listdcl -> LBRACKET RBRACKET listdcl
Rule 20    listdcl -> <empty>
Rule 21    statement -> INT IDENT statement2
Rule 22    statement -> FLOAT IDENT statement2
Rule 23    statement -> STRING IDENT statement2
Rule 24    statement -> IDENT statement1
Rule 25    statement -> printstat SEMICOLON
Rule 26    statement -> readstat SEMICOLON
Rule 27    statement -> returnstat SEMICOLON
Rule 28    statement -> ifstat
Rule 29    statement -> forstat
Rule 30    statement -> whilestat
Rule 31    statement -> new_scope LBRACE statelist RBRACE
Rule 32    statement -> BREAK SEMICOLON
Rule 33    statement -> SEMICOLON
Rule 34    statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON
Rule 35    statement1 -> ASSIGN atribstat1 SEMICOLON
Rule 36    statement1 -> LPAREN paramlistcall RPAREN SEMICOLON
Rule 37    statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
Rule 38    statement2 -> SEMICOLON
Rule 39    atribstat1 -> expression
Rule 40    atribstat1 -> allocexpression
Rule 41    atribstat1 -> funccall
Rule 42    funccall -> IDENT LPAREN paramlistcall RPAREN
Rule 43    paramlistcall -> factor paramlistcall2
Rule 44    paramlistcall -> <empty>
Rule 45    paramlistcall1 -> COMMA paramlistcall
Rule 46    paramlistcall1 -> <empty>
Rule 47    paramlistcall2 -> LBRACKET numexpression RBRACKET lvalue1 paramlistcall1
Rule 48    paramlistcall2 -> paramlistcall1
Rule 49    printstat -> PRINT expression
Rule 50    readstat -> READ expression
Rule 51    returnstat -> RETURN returnstat1
Rule 52    returnstat1 -> expression
Rule 53    returnstat1 -> <empty>
Rule 54    ifstat -> IF LPAREN expression RPAREN statement ifstat1
Rule 55    ifstat1 -> ELSE statement
Rule 56    ifstat1 -> <empty>
Rule 57    forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
Rule 58    forstat1 -> IDENT forstat3
Rule 59    forstat1 -> <empty>
Rule 60    forstat2 -> expression
Rule 61    forstat2 -> <empty>
Rule 62    forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1
Rule 63    forstat3 -> ASSIGN atribstat1
Rule 64    whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement
Rule 65    statelist -> statement statelist1
Rule 66    statelist1 -> statelist
Rule 67    statelist1 -> <empty>
Rule 68    allocexpression -> NEW types LBRACKET numexpression RBRACKET lvalue1
Rule 69    expression -> numexpression expression1
Rule 70    expression1 -> compoperator numexpression
Rule 71    expression1 -> <empty>
Rule 72    compoperator -> GT
Rule 73    compoperator -> LT
Rule 74    compoperator -> GE
Rule 75    compoperator -> LE
Rule 76    compoperator -> EQ
Rule 77    compoperator -> NEQ
Rule 78    numexpression -> term numexpression1
Rule 79    numexpression1 -> addsub term
Rule 80    numexpression1 -> <empty>
Rule 81    addsub -> PLUS
Rule 82    addsub -> MINUS
Rule 83    term -> unaryexpr term1
Rule 84    term1 -> multdiv unaryexpr term1
Rule 85    term1 -> <empty>
Rule 86    multdiv -> MULTIPLY
Rule 87    multdiv -> DIVIDE
Rule 88    multdiv -> REM
Rule 89    unaryexpr -> addsub factor
Rule 90    unaryexpr -> factor
Rule 91    factor -> int_constant
Rule 92    factor -> float_constant
Rule 93    factor -> string_constant
Rule 94    factor -> null_constant
Rule 95    factor -> IDENT lvalue1
Rule 96    factor -> LPAREN numexpression RPAREN
Rule 97    lvalue1 -> LBRACKET numexpression RBRACKET lvalue1
Rule 98    lvalue1 -> <empty>

Terminals, with rules where they appear

ASSIGN               : 34 35 62 63
BREAK                : 32
COMMA                : 17 45
DEF                  : 7 9
DIVIDE               : 87
ELSE                 : 55
EQ                   : 76
FLOAT                : 11 14 22
FOR                  : 57
GE                   : 74
GT                   : 72
IDENT                : 7 9 13 14 15 21 22 23 24 42 58 95
IF                   : 54
INT                  : 10 15 21
LBRACE               : 7 9 31 57
LBRACKET             : 19 34 37 47 62 68 97
LE                   : 75
LPAREN               : 7 9 36 42 54 57 64 96
LT                   : 73
MINUS                : 82
MULTIPLY             : 86
NEQ                  : 77
NEW                  : 68
PLUS                 : 81
PRINT                : 49
RBRACE               : 7 9 31 57
RBRACKET             : 19 34 37 47 62 68 97
READ                 : 50
REM                  : 88
RETURN               : 51
RPAREN               : 7 9 36 42 54 57 64 96
SEMICOLON            : 25 26 27 32 33 34 35 36 37 38 57 57
STRING               : 12 13 23
WHILE                : 64
error                : 
float_constant       : 92
int_constant         : 91
null_constant        : 94
string_constant      : 93

Nonterminals, with rules where they appear

addsub               : 79 89
allocexpression      : 40
atribstat1           : 34 35 62 63
compoperator         : 70
expression           : 39 49 50 52 54 60 64
expression1          : 69
factor               : 43 89 90
forstat              : 29
forstat1             : 57 57
forstat2             : 57
forstat3             : 58
funccall             : 41
funcdef              : 6
funclist             : 4
funclist1            : 6 7
ifstat               : 28
ifstat1              : 54
listdcl              : 13 14 15 19
lvalue1              : 34 37 47 62 68 95 97
multdiv              : 84
new_scope            : 3 4 9 31
new_scope_loop       : 57 64
numexpression        : 34 37 47 62 68 69 70 96 97
numexpression1       : 78
paramlist            : 7 9 17
paramlist1           : 13 14 15
paramlistcall        : 36 42 45
paramlistcall1       : 47 48
paramlistcall2       : 43
printstat            : 25
program              : 0
readstat             : 26
returnstat           : 27
returnstat1          : 51
statelist            : 7 9 31 57 66
statelist1           : 65
statement            : 3 54 55 64 65
statement1           : 24
statement2           : 21 22 23
term                 : 78 79
term1                : 83 84
types                : 68
unaryexpr            : 83 84
whilestat            : 30

Parsing method: LALR

state 0

    (0) S' -> . program
    (3) program -> . new_scope statement
    (4) program -> . new_scope funclist
    (5) program -> .
    (1) new_scope -> .

    $end            reduce using rule 5 (program -> .)
    INT             reduce using rule 1 (new_scope -> .)
    FLOAT           reduce using rule 1 (new_scope -> .)
    STRING          reduce using rule 1 (new_scope -> .)
    IDENT           reduce using rule 1 (new_scope -> .)
    BREAK           reduce using rule 1 (new_scope -> .)
    SEMICOLON       reduce using rule 1 (new_scope -> .)
    PRINT           reduce using rule 1 (new_scope -> .)
    READ            reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    FOR             reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    DEF             reduce using rule 1 (new_scope -> .)
    LBRACE          reduce using rule 1 (new_scope -> .)

    program                        shift and go to state 1
    new_scope                      shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (3) program -> new_scope . statement
    (4) program -> new_scope . funclist
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (6) funclist -> . funcdef funclist1
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .
    (9) funcdef -> . DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)
    DEF             shift and go to state 25

    new_scope                      shift and go to state 3
    statement                      shift and go to state 4
    funclist                       shift and go to state 5
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    funcdef                        shift and go to state 18

state 3

    (31) statement -> new_scope . LBRACE statelist RBRACE

    LBRACE          shift and go to state 26


state 4

    (3) program -> new_scope statement .

    $end            reduce using rule 3 (program -> new_scope statement .)


state 5

    (4) program -> new_scope funclist .

    $end            reduce using rule 4 (program -> new_scope funclist .)


state 6

    (21) statement -> INT . IDENT statement2

    IDENT           shift and go to state 27


state 7

    (24) statement -> IDENT . statement1
    (34) statement1 -> . LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON
    (35) statement1 -> . ASSIGN atribstat1 SEMICOLON
    (36) statement1 -> . LPAREN paramlistcall RPAREN SEMICOLON

    LBRACKET        shift and go to state 29
    ASSIGN          shift and go to state 30
    LPAREN          shift and go to state 31

    statement1                     shift and go to state 28

state 8

    (22) statement -> FLOAT . IDENT statement2

    IDENT           shift and go to state 32


state 9

    (23) statement -> STRING . IDENT statement2

    IDENT           shift and go to state 33


state 10

    (25) statement -> printstat . SEMICOLON

    SEMICOLON       shift and go to state 34


state 11

    (33) statement -> SEMICOLON .

    $end            reduce using rule 33 (statement -> SEMICOLON .)
    INT             reduce using rule 33 (statement -> SEMICOLON .)
    FLOAT           reduce using rule 33 (statement -> SEMICOLON .)
    STRING          reduce using rule 33 (statement -> SEMICOLON .)
    IDENT           reduce using rule 33 (statement -> SEMICOLON .)
    BREAK           reduce using rule 33 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 33 (statement -> SEMICOLON .)
    PRINT           reduce using rule 33 (statement -> SEMICOLON .)
    READ            reduce using rule 33 (statement -> SEMICOLON .)
    RETURN          reduce using rule 33 (statement -> SEMICOLON .)
    IF              reduce using rule 33 (statement -> SEMICOLON .)
    FOR             reduce using rule 33 (statement -> SEMICOLON .)
    WHILE           reduce using rule 33 (statement -> SEMICOLON .)
    LBRACE          reduce using rule 33 (statement -> SEMICOLON .)
    RBRACE          reduce using rule 33 (statement -> SEMICOLON .)
    ELSE            reduce using rule 33 (statement -> SEMICOLON .)


state 12

    (26) statement -> readstat . SEMICOLON

    SEMICOLON       shift and go to state 35


state 13

    (27) statement -> returnstat . SEMICOLON

    SEMICOLON       shift and go to state 36


state 14

    (28) statement -> ifstat .

    $end            reduce using rule 28 (statement -> ifstat .)
    INT             reduce using rule 28 (statement -> ifstat .)
    FLOAT           reduce using rule 28 (statement -> ifstat .)
    STRING          reduce using rule 28 (statement -> ifstat .)
    IDENT           reduce using rule 28 (statement -> ifstat .)
    BREAK           reduce using rule 28 (statement -> ifstat .)
    SEMICOLON       reduce using rule 28 (statement -> ifstat .)
    PRINT           reduce using rule 28 (statement -> ifstat .)
    READ            reduce using rule 28 (statement -> ifstat .)
    RETURN          reduce using rule 28 (statement -> ifstat .)
    IF              reduce using rule 28 (statement -> ifstat .)
    FOR             reduce using rule 28 (statement -> ifstat .)
    WHILE           reduce using rule 28 (statement -> ifstat .)
    LBRACE          reduce using rule 28 (statement -> ifstat .)
    RBRACE          reduce using rule 28 (statement -> ifstat .)
    ELSE            reduce using rule 28 (statement -> ifstat .)


state 15

    (29) statement -> forstat .

    $end            reduce using rule 29 (statement -> forstat .)
    INT             reduce using rule 29 (statement -> forstat .)
    FLOAT           reduce using rule 29 (statement -> forstat .)
    STRING          reduce using rule 29 (statement -> forstat .)
    IDENT           reduce using rule 29 (statement -> forstat .)
    BREAK           reduce using rule 29 (statement -> forstat .)
    SEMICOLON       reduce using rule 29 (statement -> forstat .)
    PRINT           reduce using rule 29 (statement -> forstat .)
    READ            reduce using rule 29 (statement -> forstat .)
    RETURN          reduce using rule 29 (statement -> forstat .)
    IF              reduce using rule 29 (statement -> forstat .)
    FOR             reduce using rule 29 (statement -> forstat .)
    WHILE           reduce using rule 29 (statement -> forstat .)
    LBRACE          reduce using rule 29 (statement -> forstat .)
    RBRACE          reduce using rule 29 (statement -> forstat .)
    ELSE            reduce using rule 29 (statement -> forstat .)


state 16

    (30) statement -> whilestat .

    $end            reduce using rule 30 (statement -> whilestat .)
    INT             reduce using rule 30 (statement -> whilestat .)
    FLOAT           reduce using rule 30 (statement -> whilestat .)
    STRING          reduce using rule 30 (statement -> whilestat .)
    IDENT           reduce using rule 30 (statement -> whilestat .)
    BREAK           reduce using rule 30 (statement -> whilestat .)
    SEMICOLON       reduce using rule 30 (statement -> whilestat .)
    PRINT           reduce using rule 30 (statement -> whilestat .)
    READ            reduce using rule 30 (statement -> whilestat .)
    RETURN          reduce using rule 30 (statement -> whilestat .)
    IF              reduce using rule 30 (statement -> whilestat .)
    FOR             reduce using rule 30 (statement -> whilestat .)
    WHILE           reduce using rule 30 (statement -> whilestat .)
    LBRACE          reduce using rule 30 (statement -> whilestat .)
    RBRACE          reduce using rule 30 (statement -> whilestat .)
    ELSE            reduce using rule 30 (statement -> whilestat .)


state 17

    (32) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 37


state 18

    (6) funclist -> funcdef . funclist1
    (7) funclist1 -> . DEF IDENT LPAREN paramlist RPAREN LBRACE statelist RBRACE funclist1
    (8) funclist1 -> .

    DEF             shift and go to state 39
    $end            reduce using rule 8 (funclist1 -> .)

    funclist1                      shift and go to state 38

state 19

    (49) printstat -> PRINT . expression
    (69) expression -> . numexpression expression1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    expression                     shift and go to state 40
    numexpression                  shift and go to state 41
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 20

    (50) readstat -> READ . expression
    (69) expression -> . numexpression expression1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    expression                     shift and go to state 54
    numexpression                  shift and go to state 41
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 21

    (51) returnstat -> RETURN . returnstat1
    (52) returnstat1 -> . expression
    (53) returnstat1 -> .
    (69) expression -> . numexpression expression1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    SEMICOLON       reduce using rule 53 (returnstat1 -> .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    returnstat1                    shift and go to state 55
    expression                     shift and go to state 56
    numexpression                  shift and go to state 41
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 22

    (54) ifstat -> IF . LPAREN expression RPAREN statement ifstat1

    LPAREN          shift and go to state 57


state 23

    (57) forstat -> FOR . LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE

    LPAREN          shift and go to state 58


state 24

    (64) whilestat -> WHILE . LPAREN expression RPAREN new_scope_loop statement

    LPAREN          shift and go to state 59


state 25

    (9) funcdef -> DEF . IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE

    IDENT           shift and go to state 60


state 26

    (31) statement -> new_scope LBRACE . statelist RBRACE
    (65) statelist -> . statement statelist1
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 3
    statelist                      shift and go to state 61
    statement                      shift and go to state 62
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16

state 27

    (21) statement -> INT IDENT . statement2
    (37) statement2 -> . LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
    (38) statement2 -> . SEMICOLON

    LBRACKET        shift and go to state 64
    SEMICOLON       shift and go to state 65

    statement2                     shift and go to state 63

state 28

    (24) statement -> IDENT statement1 .

    $end            reduce using rule 24 (statement -> IDENT statement1 .)
    INT             reduce using rule 24 (statement -> IDENT statement1 .)
    FLOAT           reduce using rule 24 (statement -> IDENT statement1 .)
    STRING          reduce using rule 24 (statement -> IDENT statement1 .)
    IDENT           reduce using rule 24 (statement -> IDENT statement1 .)
    BREAK           reduce using rule 24 (statement -> IDENT statement1 .)
    SEMICOLON       reduce using rule 24 (statement -> IDENT statement1 .)
    PRINT           reduce using rule 24 (statement -> IDENT statement1 .)
    READ            reduce using rule 24 (statement -> IDENT statement1 .)
    RETURN          reduce using rule 24 (statement -> IDENT statement1 .)
    IF              reduce using rule 24 (statement -> IDENT statement1 .)
    FOR             reduce using rule 24 (statement -> IDENT statement1 .)
    WHILE           reduce using rule 24 (statement -> IDENT statement1 .)
    LBRACE          reduce using rule 24 (statement -> IDENT statement1 .)
    RBRACE          reduce using rule 24 (statement -> IDENT statement1 .)
    ELSE            reduce using rule 24 (statement -> IDENT statement1 .)


state 29

    (34) statement1 -> LBRACKET . numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 66
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 30

    (35) statement1 -> ASSIGN . atribstat1 SEMICOLON
    (39) atribstat1 -> . expression
    (40) atribstat1 -> . allocexpression
    (41) atribstat1 -> . funccall
    (69) expression -> . numexpression expression1
    (68) allocexpression -> . NEW types LBRACKET numexpression RBRACKET lvalue1
    (42) funccall -> . IDENT LPAREN paramlistcall RPAREN
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    NEW             shift and go to state 71
    IDENT           shift and go to state 72
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    LPAREN          shift and go to state 53

    atribstat1                     shift and go to state 67
    expression                     shift and go to state 68
    allocexpression                shift and go to state 69
    funccall                       shift and go to state 70
    numexpression                  shift and go to state 41
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 31

    (36) statement1 -> LPAREN . paramlistcall RPAREN SEMICOLON
    (43) paramlistcall -> . factor paramlistcall2
    (44) paramlistcall -> .
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    RPAREN          reduce using rule 44 (paramlistcall -> .)
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    paramlistcall                  shift and go to state 73
    factor                         shift and go to state 74

state 32

    (22) statement -> FLOAT IDENT . statement2
    (37) statement2 -> . LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
    (38) statement2 -> . SEMICOLON

    LBRACKET        shift and go to state 64
    SEMICOLON       shift and go to state 65

    statement2                     shift and go to state 75

state 33

    (23) statement -> STRING IDENT . statement2
    (37) statement2 -> . LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
    (38) statement2 -> . SEMICOLON

    LBRACKET        shift and go to state 64
    SEMICOLON       shift and go to state 65

    statement2                     shift and go to state 76

state 34

    (25) statement -> printstat SEMICOLON .

    $end            reduce using rule 25 (statement -> printstat SEMICOLON .)
    INT             reduce using rule 25 (statement -> printstat SEMICOLON .)
    FLOAT           reduce using rule 25 (statement -> printstat SEMICOLON .)
    STRING          reduce using rule 25 (statement -> printstat SEMICOLON .)
    IDENT           reduce using rule 25 (statement -> printstat SEMICOLON .)
    BREAK           reduce using rule 25 (statement -> printstat SEMICOLON .)
    SEMICOLON       reduce using rule 25 (statement -> printstat SEMICOLON .)
    PRINT           reduce using rule 25 (statement -> printstat SEMICOLON .)
    READ            reduce using rule 25 (statement -> printstat SEMICOLON .)
    RETURN          reduce using rule 25 (statement -> printstat SEMICOLON .)
    IF              reduce using rule 25 (statement -> printstat SEMICOLON .)
    FOR             reduce using rule 25 (statement -> printstat SEMICOLON .)
    WHILE           reduce using rule 25 (statement -> printstat SEMICOLON .)
    LBRACE          reduce using rule 25 (statement -> printstat SEMICOLON .)
    RBRACE          reduce using rule 25 (statement -> printstat SEMICOLON .)
    ELSE            reduce using rule 25 (statement -> printstat SEMICOLON .)


state 35

    (26) statement -> readstat SEMICOLON .

    $end            reduce using rule 26 (statement -> readstat SEMICOLON .)
    INT             reduce using rule 26 (statement -> readstat SEMICOLON .)
    FLOAT           reduce using rule 26 (statement -> readstat SEMICOLON .)
    STRING          reduce using rule 26 (statement -> readstat SEMICOLON .)
    IDENT           reduce using rule 26 (statement -> readstat SEMICOLON .)
    BREAK           reduce using rule 26 (statement -> readstat SEMICOLON .)
    SEMICOLON       reduce using rule 26 (statement -> readstat SEMICOLON .)
    PRINT           reduce using rule 26 (statement -> readstat SEMICOLON .)
    READ            reduce using rule 26 (statement -> readstat SEMICOLON .)
    RETURN          reduce using rule 26 (statement -> readstat SEMICOLON .)
    IF              reduce using rule 26 (statement -> readstat SEMICOLON .)
    FOR             reduce using rule 26 (statement -> readstat SEMICOLON .)
    WHILE           reduce using rule 26 (statement -> readstat SEMICOLON .)
    LBRACE          reduce using rule 26 (statement -> readstat SEMICOLON .)
    RBRACE          reduce using rule 26 (statement -> readstat SEMICOLON .)
    ELSE            reduce using rule 26 (statement -> readstat SEMICOLON .)


state 36

    (27) statement -> returnstat SEMICOLON .

    $end            reduce using rule 27 (statement -> returnstat SEMICOLON .)
    INT             reduce using rule 27 (statement -> returnstat SEMICOLON .)
    FLOAT           reduce using rule 27 (statement -> returnstat SEMICOLON .)
    STRING          reduce using rule 27 (statement -> returnstat SEMICOLON .)
    IDENT           reduce using rule 27 (statement -> returnstat SEMICOLON .)
    BREAK           reduce using rule 27 (statement -> returnstat SEMICOLON .)
    SEMICOLON       reduce using rule 27 (statement -> returnstat SEMICOLON .)
    PRINT           reduce using rule 27 (statement -> returnstat SEMICOLON .)
    READ            reduce using rule 27 (statement -> returnstat SEMICOLON .)
    RETURN          reduce using rule 27 (statement -> returnstat SEMICOLON .)
    IF              reduce using rule 27 (statement -> returnstat SEMICOLON .)
    FOR             reduce using rule 27 (statement -> returnstat SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> returnstat SEMICOLON .)
    LBRACE          reduce using rule 27 (statement -> returnstat SEMICOLON .)
    RBRACE          reduce using rule 27 (statement -> returnstat SEMICOLON .)
    ELSE            reduce using rule 27 (statement -> returnstat SEMICOLON .)


state 37

    (32) statement -> BREAK SEMICOLON .

    $end            reduce using rule 32 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 32 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 32 (statement -> BREAK SEMICOLON .)
    IDENT           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 32 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    READ            reduce using rule 32 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 32 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 32 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 32 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 32 (statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 32 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 32 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 32 (statement -> BREAK SEMICOLON .)


state 38

    (6) funclist -> funcdef funclist1 .

    $end            reduce using rule 6 (funclist -> funcdef funclist1 .)


state 39

    (7) funclist1 -> DEF . IDENT LPAREN paramlist RPAREN LBRACE statelist RBRACE funclist1

    IDENT           shift and go to state 77


state 40

    (49) printstat -> PRINT expression .

    SEMICOLON       reduce using rule 49 (printstat -> PRINT expression .)


state 41

    (69) expression -> numexpression . expression1
    (70) expression1 -> . compoperator numexpression
    (71) expression1 -> .
    (72) compoperator -> . GT
    (73) compoperator -> . LT
    (74) compoperator -> . GE
    (75) compoperator -> . LE
    (76) compoperator -> . EQ
    (77) compoperator -> . NEQ

    SEMICOLON       reduce using rule 71 (expression1 -> .)
    RPAREN          reduce using rule 71 (expression1 -> .)
    GT              shift and go to state 80
    LT              shift and go to state 81
    GE              shift and go to state 82
    LE              shift and go to state 83
    EQ              shift and go to state 84
    NEQ             shift and go to state 85

    expression1                    shift and go to state 78
    compoperator                   shift and go to state 79

state 42

    (78) numexpression -> term . numexpression1
    (79) numexpression1 -> . addsub term
    (80) numexpression1 -> .
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS

    GT              reduce using rule 80 (numexpression1 -> .)
    LT              reduce using rule 80 (numexpression1 -> .)
    GE              reduce using rule 80 (numexpression1 -> .)
    LE              reduce using rule 80 (numexpression1 -> .)
    EQ              reduce using rule 80 (numexpression1 -> .)
    NEQ             reduce using rule 80 (numexpression1 -> .)
    SEMICOLON       reduce using rule 80 (numexpression1 -> .)
    RBRACKET        reduce using rule 80 (numexpression1 -> .)
    RPAREN          reduce using rule 80 (numexpression1 -> .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47

    numexpression1                 shift and go to state 86
    addsub                         shift and go to state 87

state 43

    (83) term -> unaryexpr . term1
    (84) term1 -> . multdiv unaryexpr term1
    (85) term1 -> .
    (86) multdiv -> . MULTIPLY
    (87) multdiv -> . DIVIDE
    (88) multdiv -> . REM

    PLUS            reduce using rule 85 (term1 -> .)
    MINUS           reduce using rule 85 (term1 -> .)
    GT              reduce using rule 85 (term1 -> .)
    LT              reduce using rule 85 (term1 -> .)
    GE              reduce using rule 85 (term1 -> .)
    LE              reduce using rule 85 (term1 -> .)
    EQ              reduce using rule 85 (term1 -> .)
    NEQ             reduce using rule 85 (term1 -> .)
    SEMICOLON       reduce using rule 85 (term1 -> .)
    RBRACKET        reduce using rule 85 (term1 -> .)
    RPAREN          reduce using rule 85 (term1 -> .)
    MULTIPLY        shift and go to state 90
    DIVIDE          shift and go to state 91
    REM             shift and go to state 92

    term1                          shift and go to state 88
    multdiv                        shift and go to state 89

state 44

    (89) unaryexpr -> addsub . factor
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    factor                         shift and go to state 93

state 45

    (90) unaryexpr -> factor .

    MULTIPLY        reduce using rule 90 (unaryexpr -> factor .)
    DIVIDE          reduce using rule 90 (unaryexpr -> factor .)
    REM             reduce using rule 90 (unaryexpr -> factor .)
    PLUS            reduce using rule 90 (unaryexpr -> factor .)
    MINUS           reduce using rule 90 (unaryexpr -> factor .)
    GT              reduce using rule 90 (unaryexpr -> factor .)
    LT              reduce using rule 90 (unaryexpr -> factor .)
    GE              reduce using rule 90 (unaryexpr -> factor .)
    LE              reduce using rule 90 (unaryexpr -> factor .)
    EQ              reduce using rule 90 (unaryexpr -> factor .)
    NEQ             reduce using rule 90 (unaryexpr -> factor .)
    SEMICOLON       reduce using rule 90 (unaryexpr -> factor .)
    RBRACKET        reduce using rule 90 (unaryexpr -> factor .)
    RPAREN          reduce using rule 90 (unaryexpr -> factor .)


state 46

    (81) addsub -> PLUS .

    int_constant    reduce using rule 81 (addsub -> PLUS .)
    float_constant  reduce using rule 81 (addsub -> PLUS .)
    string_constant reduce using rule 81 (addsub -> PLUS .)
    null_constant   reduce using rule 81 (addsub -> PLUS .)
    IDENT           reduce using rule 81 (addsub -> PLUS .)
    LPAREN          reduce using rule 81 (addsub -> PLUS .)
    PLUS            reduce using rule 81 (addsub -> PLUS .)
    MINUS           reduce using rule 81 (addsub -> PLUS .)


state 47

    (82) addsub -> MINUS .

    int_constant    reduce using rule 82 (addsub -> MINUS .)
    float_constant  reduce using rule 82 (addsub -> MINUS .)
    string_constant reduce using rule 82 (addsub -> MINUS .)
    null_constant   reduce using rule 82 (addsub -> MINUS .)
    IDENT           reduce using rule 82 (addsub -> MINUS .)
    LPAREN          reduce using rule 82 (addsub -> MINUS .)
    PLUS            reduce using rule 82 (addsub -> MINUS .)
    MINUS           reduce using rule 82 (addsub -> MINUS .)


state 48

    (91) factor -> int_constant .

    MULTIPLY        reduce using rule 91 (factor -> int_constant .)
    DIVIDE          reduce using rule 91 (factor -> int_constant .)
    REM             reduce using rule 91 (factor -> int_constant .)
    PLUS            reduce using rule 91 (factor -> int_constant .)
    MINUS           reduce using rule 91 (factor -> int_constant .)
    GT              reduce using rule 91 (factor -> int_constant .)
    LT              reduce using rule 91 (factor -> int_constant .)
    GE              reduce using rule 91 (factor -> int_constant .)
    LE              reduce using rule 91 (factor -> int_constant .)
    EQ              reduce using rule 91 (factor -> int_constant .)
    NEQ             reduce using rule 91 (factor -> int_constant .)
    SEMICOLON       reduce using rule 91 (factor -> int_constant .)
    RBRACKET        reduce using rule 91 (factor -> int_constant .)
    LBRACKET        reduce using rule 91 (factor -> int_constant .)
    COMMA           reduce using rule 91 (factor -> int_constant .)
    RPAREN          reduce using rule 91 (factor -> int_constant .)


state 49

    (92) factor -> float_constant .

    MULTIPLY        reduce using rule 92 (factor -> float_constant .)
    DIVIDE          reduce using rule 92 (factor -> float_constant .)
    REM             reduce using rule 92 (factor -> float_constant .)
    PLUS            reduce using rule 92 (factor -> float_constant .)
    MINUS           reduce using rule 92 (factor -> float_constant .)
    GT              reduce using rule 92 (factor -> float_constant .)
    LT              reduce using rule 92 (factor -> float_constant .)
    GE              reduce using rule 92 (factor -> float_constant .)
    LE              reduce using rule 92 (factor -> float_constant .)
    EQ              reduce using rule 92 (factor -> float_constant .)
    NEQ             reduce using rule 92 (factor -> float_constant .)
    SEMICOLON       reduce using rule 92 (factor -> float_constant .)
    RBRACKET        reduce using rule 92 (factor -> float_constant .)
    LBRACKET        reduce using rule 92 (factor -> float_constant .)
    COMMA           reduce using rule 92 (factor -> float_constant .)
    RPAREN          reduce using rule 92 (factor -> float_constant .)


state 50

    (93) factor -> string_constant .

    MULTIPLY        reduce using rule 93 (factor -> string_constant .)
    DIVIDE          reduce using rule 93 (factor -> string_constant .)
    REM             reduce using rule 93 (factor -> string_constant .)
    PLUS            reduce using rule 93 (factor -> string_constant .)
    MINUS           reduce using rule 93 (factor -> string_constant .)
    GT              reduce using rule 93 (factor -> string_constant .)
    LT              reduce using rule 93 (factor -> string_constant .)
    GE              reduce using rule 93 (factor -> string_constant .)
    LE              reduce using rule 93 (factor -> string_constant .)
    EQ              reduce using rule 93 (factor -> string_constant .)
    NEQ             reduce using rule 93 (factor -> string_constant .)
    SEMICOLON       reduce using rule 93 (factor -> string_constant .)
    RBRACKET        reduce using rule 93 (factor -> string_constant .)
    LBRACKET        reduce using rule 93 (factor -> string_constant .)
    COMMA           reduce using rule 93 (factor -> string_constant .)
    RPAREN          reduce using rule 93 (factor -> string_constant .)


state 51

    (94) factor -> null_constant .

    MULTIPLY        reduce using rule 94 (factor -> null_constant .)
    DIVIDE          reduce using rule 94 (factor -> null_constant .)
    REM             reduce using rule 94 (factor -> null_constant .)
    PLUS            reduce using rule 94 (factor -> null_constant .)
    MINUS           reduce using rule 94 (factor -> null_constant .)
    GT              reduce using rule 94 (factor -> null_constant .)
    LT              reduce using rule 94 (factor -> null_constant .)
    GE              reduce using rule 94 (factor -> null_constant .)
    LE              reduce using rule 94 (factor -> null_constant .)
    EQ              reduce using rule 94 (factor -> null_constant .)
    NEQ             reduce using rule 94 (factor -> null_constant .)
    SEMICOLON       reduce using rule 94 (factor -> null_constant .)
    RBRACKET        reduce using rule 94 (factor -> null_constant .)
    LBRACKET        reduce using rule 94 (factor -> null_constant .)
    COMMA           reduce using rule 94 (factor -> null_constant .)
    RPAREN          reduce using rule 94 (factor -> null_constant .)


state 52

    (95) factor -> IDENT . lvalue1
    (97) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (98) lvalue1 -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 95
    MULTIPLY        reduce using rule 98 (lvalue1 -> .)
    DIVIDE          reduce using rule 98 (lvalue1 -> .)
    REM             reduce using rule 98 (lvalue1 -> .)
    PLUS            reduce using rule 98 (lvalue1 -> .)
    MINUS           reduce using rule 98 (lvalue1 -> .)
    GT              reduce using rule 98 (lvalue1 -> .)
    LT              reduce using rule 98 (lvalue1 -> .)
    GE              reduce using rule 98 (lvalue1 -> .)
    LE              reduce using rule 98 (lvalue1 -> .)
    EQ              reduce using rule 98 (lvalue1 -> .)
    NEQ             reduce using rule 98 (lvalue1 -> .)
    SEMICOLON       reduce using rule 98 (lvalue1 -> .)
    RBRACKET        reduce using rule 98 (lvalue1 -> .)
    COMMA           reduce using rule 98 (lvalue1 -> .)
    RPAREN          reduce using rule 98 (lvalue1 -> .)

  ! LBRACKET        [ reduce using rule 98 (lvalue1 -> .) ]

    lvalue1                        shift and go to state 94

state 53

    (96) factor -> LPAREN . numexpression RPAREN
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 96
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 54

    (50) readstat -> READ expression .

    SEMICOLON       reduce using rule 50 (readstat -> READ expression .)


state 55

    (51) returnstat -> RETURN returnstat1 .

    SEMICOLON       reduce using rule 51 (returnstat -> RETURN returnstat1 .)


state 56

    (52) returnstat1 -> expression .

    SEMICOLON       reduce using rule 52 (returnstat1 -> expression .)


state 57

    (54) ifstat -> IF LPAREN . expression RPAREN statement ifstat1
    (69) expression -> . numexpression expression1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    expression                     shift and go to state 97
    numexpression                  shift and go to state 41
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 58

    (57) forstat -> FOR LPAREN . forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (58) forstat1 -> . IDENT forstat3
    (59) forstat1 -> .

    IDENT           shift and go to state 99
    SEMICOLON       reduce using rule 59 (forstat1 -> .)

    forstat1                       shift and go to state 98

state 59

    (64) whilestat -> WHILE LPAREN . expression RPAREN new_scope_loop statement
    (69) expression -> . numexpression expression1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    expression                     shift and go to state 100
    numexpression                  shift and go to state 41
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 60

    (9) funcdef -> DEF IDENT . new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE
    (1) new_scope -> .

    LPAREN          reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 101

state 61

    (31) statement -> new_scope LBRACE statelist . RBRACE

    RBRACE          shift and go to state 102


state 62

    (65) statelist -> statement . statelist1
    (66) statelist1 -> . statelist
    (67) statelist1 -> .
    (65) statelist -> . statement statelist1
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .

    RBRACE          reduce using rule 67 (statelist1 -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)

    statement                      shift and go to state 62
    statelist1                     shift and go to state 103
    statelist                      shift and go to state 104
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3

state 63

    (21) statement -> INT IDENT statement2 .

    $end            reduce using rule 21 (statement -> INT IDENT statement2 .)
    INT             reduce using rule 21 (statement -> INT IDENT statement2 .)
    FLOAT           reduce using rule 21 (statement -> INT IDENT statement2 .)
    STRING          reduce using rule 21 (statement -> INT IDENT statement2 .)
    IDENT           reduce using rule 21 (statement -> INT IDENT statement2 .)
    BREAK           reduce using rule 21 (statement -> INT IDENT statement2 .)
    SEMICOLON       reduce using rule 21 (statement -> INT IDENT statement2 .)
    PRINT           reduce using rule 21 (statement -> INT IDENT statement2 .)
    READ            reduce using rule 21 (statement -> INT IDENT statement2 .)
    RETURN          reduce using rule 21 (statement -> INT IDENT statement2 .)
    IF              reduce using rule 21 (statement -> INT IDENT statement2 .)
    FOR             reduce using rule 21 (statement -> INT IDENT statement2 .)
    WHILE           reduce using rule 21 (statement -> INT IDENT statement2 .)
    LBRACE          reduce using rule 21 (statement -> INT IDENT statement2 .)
    RBRACE          reduce using rule 21 (statement -> INT IDENT statement2 .)
    ELSE            reduce using rule 21 (statement -> INT IDENT statement2 .)


state 64

    (37) statement2 -> LBRACKET . numexpression RBRACKET lvalue1 SEMICOLON
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 105
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 65

    (38) statement2 -> SEMICOLON .

    $end            reduce using rule 38 (statement2 -> SEMICOLON .)
    INT             reduce using rule 38 (statement2 -> SEMICOLON .)
    FLOAT           reduce using rule 38 (statement2 -> SEMICOLON .)
    STRING          reduce using rule 38 (statement2 -> SEMICOLON .)
    IDENT           reduce using rule 38 (statement2 -> SEMICOLON .)
    BREAK           reduce using rule 38 (statement2 -> SEMICOLON .)
    SEMICOLON       reduce using rule 38 (statement2 -> SEMICOLON .)
    PRINT           reduce using rule 38 (statement2 -> SEMICOLON .)
    READ            reduce using rule 38 (statement2 -> SEMICOLON .)
    RETURN          reduce using rule 38 (statement2 -> SEMICOLON .)
    IF              reduce using rule 38 (statement2 -> SEMICOLON .)
    FOR             reduce using rule 38 (statement2 -> SEMICOLON .)
    WHILE           reduce using rule 38 (statement2 -> SEMICOLON .)
    LBRACE          reduce using rule 38 (statement2 -> SEMICOLON .)
    RBRACE          reduce using rule 38 (statement2 -> SEMICOLON .)
    ELSE            reduce using rule 38 (statement2 -> SEMICOLON .)


state 66

    (34) statement1 -> LBRACKET numexpression . RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON

    RBRACKET        shift and go to state 106


state 67

    (35) statement1 -> ASSIGN atribstat1 . SEMICOLON

    SEMICOLON       shift and go to state 107


state 68

    (39) atribstat1 -> expression .

    SEMICOLON       reduce using rule 39 (atribstat1 -> expression .)
    RPAREN          reduce using rule 39 (atribstat1 -> expression .)


state 69

    (40) atribstat1 -> allocexpression .

    SEMICOLON       reduce using rule 40 (atribstat1 -> allocexpression .)
    RPAREN          reduce using rule 40 (atribstat1 -> allocexpression .)


state 70

    (41) atribstat1 -> funccall .

    SEMICOLON       reduce using rule 41 (atribstat1 -> funccall .)
    RPAREN          reduce using rule 41 (atribstat1 -> funccall .)


state 71

    (68) allocexpression -> NEW . types LBRACKET numexpression RBRACKET lvalue1
    (10) types -> . INT
    (11) types -> . FLOAT
    (12) types -> . STRING

    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    types                          shift and go to state 108

state 72

    (42) funccall -> IDENT . LPAREN paramlistcall RPAREN
    (95) factor -> IDENT . lvalue1
    (97) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (98) lvalue1 -> .

    LPAREN          shift and go to state 112
    LBRACKET        shift and go to state 95
    MULTIPLY        reduce using rule 98 (lvalue1 -> .)
    DIVIDE          reduce using rule 98 (lvalue1 -> .)
    REM             reduce using rule 98 (lvalue1 -> .)
    PLUS            reduce using rule 98 (lvalue1 -> .)
    MINUS           reduce using rule 98 (lvalue1 -> .)
    GT              reduce using rule 98 (lvalue1 -> .)
    LT              reduce using rule 98 (lvalue1 -> .)
    GE              reduce using rule 98 (lvalue1 -> .)
    LE              reduce using rule 98 (lvalue1 -> .)
    EQ              reduce using rule 98 (lvalue1 -> .)
    NEQ             reduce using rule 98 (lvalue1 -> .)
    SEMICOLON       reduce using rule 98 (lvalue1 -> .)
    RPAREN          reduce using rule 98 (lvalue1 -> .)

    lvalue1                        shift and go to state 94

state 73

    (36) statement1 -> LPAREN paramlistcall . RPAREN SEMICOLON

    RPAREN          shift and go to state 113


state 74

    (43) paramlistcall -> factor . paramlistcall2
    (47) paramlistcall2 -> . LBRACKET numexpression RBRACKET lvalue1 paramlistcall1
    (48) paramlistcall2 -> . paramlistcall1
    (45) paramlistcall1 -> . COMMA paramlistcall
    (46) paramlistcall1 -> .

    LBRACKET        shift and go to state 115
    COMMA           shift and go to state 117
    RPAREN          reduce using rule 46 (paramlistcall1 -> .)

    paramlistcall2                 shift and go to state 114
    paramlistcall1                 shift and go to state 116

state 75

    (22) statement -> FLOAT IDENT statement2 .

    $end            reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    INT             reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    FLOAT           reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    STRING          reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    IDENT           reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    BREAK           reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    SEMICOLON       reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    PRINT           reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    READ            reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    RETURN          reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    IF              reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    FOR             reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    WHILE           reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    LBRACE          reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    RBRACE          reduce using rule 22 (statement -> FLOAT IDENT statement2 .)
    ELSE            reduce using rule 22 (statement -> FLOAT IDENT statement2 .)


state 76

    (23) statement -> STRING IDENT statement2 .

    $end            reduce using rule 23 (statement -> STRING IDENT statement2 .)
    INT             reduce using rule 23 (statement -> STRING IDENT statement2 .)
    FLOAT           reduce using rule 23 (statement -> STRING IDENT statement2 .)
    STRING          reduce using rule 23 (statement -> STRING IDENT statement2 .)
    IDENT           reduce using rule 23 (statement -> STRING IDENT statement2 .)
    BREAK           reduce using rule 23 (statement -> STRING IDENT statement2 .)
    SEMICOLON       reduce using rule 23 (statement -> STRING IDENT statement2 .)
    PRINT           reduce using rule 23 (statement -> STRING IDENT statement2 .)
    READ            reduce using rule 23 (statement -> STRING IDENT statement2 .)
    RETURN          reduce using rule 23 (statement -> STRING IDENT statement2 .)
    IF              reduce using rule 23 (statement -> STRING IDENT statement2 .)
    FOR             reduce using rule 23 (statement -> STRING IDENT statement2 .)
    WHILE           reduce using rule 23 (statement -> STRING IDENT statement2 .)
    LBRACE          reduce using rule 23 (statement -> STRING IDENT statement2 .)
    RBRACE          reduce using rule 23 (statement -> STRING IDENT statement2 .)
    ELSE            reduce using rule 23 (statement -> STRING IDENT statement2 .)


state 77

    (7) funclist1 -> DEF IDENT . LPAREN paramlist RPAREN LBRACE statelist RBRACE funclist1

    LPAREN          shift and go to state 118


state 78

    (69) expression -> numexpression expression1 .

    SEMICOLON       reduce using rule 69 (expression -> numexpression expression1 .)
    RPAREN          reduce using rule 69 (expression -> numexpression expression1 .)


state 79

    (70) expression1 -> compoperator . numexpression
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 119
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 80

    (72) compoperator -> GT .

    PLUS            reduce using rule 72 (compoperator -> GT .)
    MINUS           reduce using rule 72 (compoperator -> GT .)
    int_constant    reduce using rule 72 (compoperator -> GT .)
    float_constant  reduce using rule 72 (compoperator -> GT .)
    string_constant reduce using rule 72 (compoperator -> GT .)
    null_constant   reduce using rule 72 (compoperator -> GT .)
    IDENT           reduce using rule 72 (compoperator -> GT .)
    LPAREN          reduce using rule 72 (compoperator -> GT .)


state 81

    (73) compoperator -> LT .

    PLUS            reduce using rule 73 (compoperator -> LT .)
    MINUS           reduce using rule 73 (compoperator -> LT .)
    int_constant    reduce using rule 73 (compoperator -> LT .)
    float_constant  reduce using rule 73 (compoperator -> LT .)
    string_constant reduce using rule 73 (compoperator -> LT .)
    null_constant   reduce using rule 73 (compoperator -> LT .)
    IDENT           reduce using rule 73 (compoperator -> LT .)
    LPAREN          reduce using rule 73 (compoperator -> LT .)


state 82

    (74) compoperator -> GE .

    PLUS            reduce using rule 74 (compoperator -> GE .)
    MINUS           reduce using rule 74 (compoperator -> GE .)
    int_constant    reduce using rule 74 (compoperator -> GE .)
    float_constant  reduce using rule 74 (compoperator -> GE .)
    string_constant reduce using rule 74 (compoperator -> GE .)
    null_constant   reduce using rule 74 (compoperator -> GE .)
    IDENT           reduce using rule 74 (compoperator -> GE .)
    LPAREN          reduce using rule 74 (compoperator -> GE .)


state 83

    (75) compoperator -> LE .

    PLUS            reduce using rule 75 (compoperator -> LE .)
    MINUS           reduce using rule 75 (compoperator -> LE .)
    int_constant    reduce using rule 75 (compoperator -> LE .)
    float_constant  reduce using rule 75 (compoperator -> LE .)
    string_constant reduce using rule 75 (compoperator -> LE .)
    null_constant   reduce using rule 75 (compoperator -> LE .)
    IDENT           reduce using rule 75 (compoperator -> LE .)
    LPAREN          reduce using rule 75 (compoperator -> LE .)


state 84

    (76) compoperator -> EQ .

    PLUS            reduce using rule 76 (compoperator -> EQ .)
    MINUS           reduce using rule 76 (compoperator -> EQ .)
    int_constant    reduce using rule 76 (compoperator -> EQ .)
    float_constant  reduce using rule 76 (compoperator -> EQ .)
    string_constant reduce using rule 76 (compoperator -> EQ .)
    null_constant   reduce using rule 76 (compoperator -> EQ .)
    IDENT           reduce using rule 76 (compoperator -> EQ .)
    LPAREN          reduce using rule 76 (compoperator -> EQ .)


state 85

    (77) compoperator -> NEQ .

    PLUS            reduce using rule 77 (compoperator -> NEQ .)
    MINUS           reduce using rule 77 (compoperator -> NEQ .)
    int_constant    reduce using rule 77 (compoperator -> NEQ .)
    float_constant  reduce using rule 77 (compoperator -> NEQ .)
    string_constant reduce using rule 77 (compoperator -> NEQ .)
    null_constant   reduce using rule 77 (compoperator -> NEQ .)
    IDENT           reduce using rule 77 (compoperator -> NEQ .)
    LPAREN          reduce using rule 77 (compoperator -> NEQ .)


state 86

    (78) numexpression -> term numexpression1 .

    GT              reduce using rule 78 (numexpression -> term numexpression1 .)
    LT              reduce using rule 78 (numexpression -> term numexpression1 .)
    GE              reduce using rule 78 (numexpression -> term numexpression1 .)
    LE              reduce using rule 78 (numexpression -> term numexpression1 .)
    EQ              reduce using rule 78 (numexpression -> term numexpression1 .)
    NEQ             reduce using rule 78 (numexpression -> term numexpression1 .)
    SEMICOLON       reduce using rule 78 (numexpression -> term numexpression1 .)
    RBRACKET        reduce using rule 78 (numexpression -> term numexpression1 .)
    RPAREN          reduce using rule 78 (numexpression -> term numexpression1 .)


state 87

    (79) numexpression1 -> addsub . term
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    addsub                         shift and go to state 44
    term                           shift and go to state 120
    unaryexpr                      shift and go to state 43
    factor                         shift and go to state 45

state 88

    (83) term -> unaryexpr term1 .

    PLUS            reduce using rule 83 (term -> unaryexpr term1 .)
    MINUS           reduce using rule 83 (term -> unaryexpr term1 .)
    GT              reduce using rule 83 (term -> unaryexpr term1 .)
    LT              reduce using rule 83 (term -> unaryexpr term1 .)
    GE              reduce using rule 83 (term -> unaryexpr term1 .)
    LE              reduce using rule 83 (term -> unaryexpr term1 .)
    EQ              reduce using rule 83 (term -> unaryexpr term1 .)
    NEQ             reduce using rule 83 (term -> unaryexpr term1 .)
    SEMICOLON       reduce using rule 83 (term -> unaryexpr term1 .)
    RBRACKET        reduce using rule 83 (term -> unaryexpr term1 .)
    RPAREN          reduce using rule 83 (term -> unaryexpr term1 .)


state 89

    (84) term1 -> multdiv . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    unaryexpr                      shift and go to state 121
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 90

    (86) multdiv -> MULTIPLY .

    PLUS            reduce using rule 86 (multdiv -> MULTIPLY .)
    MINUS           reduce using rule 86 (multdiv -> MULTIPLY .)
    int_constant    reduce using rule 86 (multdiv -> MULTIPLY .)
    float_constant  reduce using rule 86 (multdiv -> MULTIPLY .)
    string_constant reduce using rule 86 (multdiv -> MULTIPLY .)
    null_constant   reduce using rule 86 (multdiv -> MULTIPLY .)
    IDENT           reduce using rule 86 (multdiv -> MULTIPLY .)
    LPAREN          reduce using rule 86 (multdiv -> MULTIPLY .)


state 91

    (87) multdiv -> DIVIDE .

    PLUS            reduce using rule 87 (multdiv -> DIVIDE .)
    MINUS           reduce using rule 87 (multdiv -> DIVIDE .)
    int_constant    reduce using rule 87 (multdiv -> DIVIDE .)
    float_constant  reduce using rule 87 (multdiv -> DIVIDE .)
    string_constant reduce using rule 87 (multdiv -> DIVIDE .)
    null_constant   reduce using rule 87 (multdiv -> DIVIDE .)
    IDENT           reduce using rule 87 (multdiv -> DIVIDE .)
    LPAREN          reduce using rule 87 (multdiv -> DIVIDE .)


state 92

    (88) multdiv -> REM .

    PLUS            reduce using rule 88 (multdiv -> REM .)
    MINUS           reduce using rule 88 (multdiv -> REM .)
    int_constant    reduce using rule 88 (multdiv -> REM .)
    float_constant  reduce using rule 88 (multdiv -> REM .)
    string_constant reduce using rule 88 (multdiv -> REM .)
    null_constant   reduce using rule 88 (multdiv -> REM .)
    IDENT           reduce using rule 88 (multdiv -> REM .)
    LPAREN          reduce using rule 88 (multdiv -> REM .)


state 93

    (89) unaryexpr -> addsub factor .

    MULTIPLY        reduce using rule 89 (unaryexpr -> addsub factor .)
    DIVIDE          reduce using rule 89 (unaryexpr -> addsub factor .)
    REM             reduce using rule 89 (unaryexpr -> addsub factor .)
    PLUS            reduce using rule 89 (unaryexpr -> addsub factor .)
    MINUS           reduce using rule 89 (unaryexpr -> addsub factor .)
    GT              reduce using rule 89 (unaryexpr -> addsub factor .)
    LT              reduce using rule 89 (unaryexpr -> addsub factor .)
    GE              reduce using rule 89 (unaryexpr -> addsub factor .)
    LE              reduce using rule 89 (unaryexpr -> addsub factor .)
    EQ              reduce using rule 89 (unaryexpr -> addsub factor .)
    NEQ             reduce using rule 89 (unaryexpr -> addsub factor .)
    SEMICOLON       reduce using rule 89 (unaryexpr -> addsub factor .)
    RBRACKET        reduce using rule 89 (unaryexpr -> addsub factor .)
    RPAREN          reduce using rule 89 (unaryexpr -> addsub factor .)


state 94

    (95) factor -> IDENT lvalue1 .

    MULTIPLY        reduce using rule 95 (factor -> IDENT lvalue1 .)
    DIVIDE          reduce using rule 95 (factor -> IDENT lvalue1 .)
    REM             reduce using rule 95 (factor -> IDENT lvalue1 .)
    PLUS            reduce using rule 95 (factor -> IDENT lvalue1 .)
    MINUS           reduce using rule 95 (factor -> IDENT lvalue1 .)
    GT              reduce using rule 95 (factor -> IDENT lvalue1 .)
    LT              reduce using rule 95 (factor -> IDENT lvalue1 .)
    GE              reduce using rule 95 (factor -> IDENT lvalue1 .)
    LE              reduce using rule 95 (factor -> IDENT lvalue1 .)
    EQ              reduce using rule 95 (factor -> IDENT lvalue1 .)
    NEQ             reduce using rule 95 (factor -> IDENT lvalue1 .)
    SEMICOLON       reduce using rule 95 (factor -> IDENT lvalue1 .)
    RBRACKET        reduce using rule 95 (factor -> IDENT lvalue1 .)
    LBRACKET        reduce using rule 95 (factor -> IDENT lvalue1 .)
    COMMA           reduce using rule 95 (factor -> IDENT lvalue1 .)
    RPAREN          reduce using rule 95 (factor -> IDENT lvalue1 .)


state 95

    (97) lvalue1 -> LBRACKET . numexpression RBRACKET lvalue1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 122
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 96

    (96) factor -> LPAREN numexpression . RPAREN

    RPAREN          shift and go to state 123


state 97

    (54) ifstat -> IF LPAREN expression . RPAREN statement ifstat1

    RPAREN          shift and go to state 124


state 98

    (57) forstat -> FOR LPAREN forstat1 . SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE

    SEMICOLON       shift and go to state 125


state 99

    (58) forstat1 -> IDENT . forstat3
    (62) forstat3 -> . LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1
    (63) forstat3 -> . ASSIGN atribstat1

    LBRACKET        shift and go to state 127
    ASSIGN          shift and go to state 128

    forstat3                       shift and go to state 126

state 100

    (64) whilestat -> WHILE LPAREN expression . RPAREN new_scope_loop statement

    RPAREN          shift and go to state 129


state 101

    (9) funcdef -> DEF IDENT new_scope . LPAREN paramlist RPAREN LBRACE statelist RBRACE

    LPAREN          shift and go to state 130


state 102

    (31) statement -> new_scope LBRACE statelist RBRACE .

    $end            reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    INT             reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    FLOAT           reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    STRING          reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    IDENT           reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    BREAK           reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    SEMICOLON       reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    PRINT           reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    READ            reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    RETURN          reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    IF              reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    FOR             reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    WHILE           reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    LBRACE          reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    RBRACE          reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)
    ELSE            reduce using rule 31 (statement -> new_scope LBRACE statelist RBRACE .)


state 103

    (65) statelist -> statement statelist1 .

    RBRACE          reduce using rule 65 (statelist -> statement statelist1 .)


state 104

    (66) statelist1 -> statelist .

    RBRACE          reduce using rule 66 (statelist1 -> statelist .)


state 105

    (37) statement2 -> LBRACKET numexpression . RBRACKET lvalue1 SEMICOLON

    RBRACKET        shift and go to state 131


state 106

    (34) statement1 -> LBRACKET numexpression RBRACKET . lvalue1 ASSIGN atribstat1 SEMICOLON
    (97) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (98) lvalue1 -> .

    LBRACKET        shift and go to state 95
    ASSIGN          reduce using rule 98 (lvalue1 -> .)

    lvalue1                        shift and go to state 132

state 107

    (35) statement1 -> ASSIGN atribstat1 SEMICOLON .

    $end            reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    INT             reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    FLOAT           reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    STRING          reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    IDENT           reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    BREAK           reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    SEMICOLON       reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    PRINT           reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    READ            reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    RETURN          reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    IF              reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    FOR             reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    WHILE           reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    LBRACE          reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    RBRACE          reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)
    ELSE            reduce using rule 35 (statement1 -> ASSIGN atribstat1 SEMICOLON .)


state 108

    (68) allocexpression -> NEW types . LBRACKET numexpression RBRACKET lvalue1

    LBRACKET        shift and go to state 133


state 109

    (10) types -> INT .

    LBRACKET        reduce using rule 10 (types -> INT .)


state 110

    (11) types -> FLOAT .

    LBRACKET        reduce using rule 11 (types -> FLOAT .)


state 111

    (12) types -> STRING .

    LBRACKET        reduce using rule 12 (types -> STRING .)


state 112

    (42) funccall -> IDENT LPAREN . paramlistcall RPAREN
    (43) paramlistcall -> . factor paramlistcall2
    (44) paramlistcall -> .
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    RPAREN          reduce using rule 44 (paramlistcall -> .)
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    paramlistcall                  shift and go to state 134
    factor                         shift and go to state 74

state 113

    (36) statement1 -> LPAREN paramlistcall RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 135


state 114

    (43) paramlistcall -> factor paramlistcall2 .

    RPAREN          reduce using rule 43 (paramlistcall -> factor paramlistcall2 .)


state 115

    (47) paramlistcall2 -> LBRACKET . numexpression RBRACKET lvalue1 paramlistcall1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 136
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 116

    (48) paramlistcall2 -> paramlistcall1 .

    RPAREN          reduce using rule 48 (paramlistcall2 -> paramlistcall1 .)


state 117

    (45) paramlistcall1 -> COMMA . paramlistcall
    (43) paramlistcall -> . factor paramlistcall2
    (44) paramlistcall -> .
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    RPAREN          reduce using rule 44 (paramlistcall -> .)
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    paramlistcall                  shift and go to state 137
    factor                         shift and go to state 74

state 118

    (7) funclist1 -> DEF IDENT LPAREN . paramlist RPAREN LBRACE statelist RBRACE funclist1
    (13) paramlist -> . STRING listdcl IDENT paramlist1
    (14) paramlist -> . FLOAT listdcl IDENT paramlist1
    (15) paramlist -> . INT listdcl IDENT paramlist1
    (16) paramlist -> .

    STRING          shift and go to state 139
    FLOAT           shift and go to state 140
    INT             shift and go to state 141
    RPAREN          reduce using rule 16 (paramlist -> .)

    paramlist                      shift and go to state 138

state 119

    (70) expression1 -> compoperator numexpression .

    SEMICOLON       reduce using rule 70 (expression1 -> compoperator numexpression .)
    RPAREN          reduce using rule 70 (expression1 -> compoperator numexpression .)


state 120

    (79) numexpression1 -> addsub term .

    GT              reduce using rule 79 (numexpression1 -> addsub term .)
    LT              reduce using rule 79 (numexpression1 -> addsub term .)
    GE              reduce using rule 79 (numexpression1 -> addsub term .)
    LE              reduce using rule 79 (numexpression1 -> addsub term .)
    EQ              reduce using rule 79 (numexpression1 -> addsub term .)
    NEQ             reduce using rule 79 (numexpression1 -> addsub term .)
    SEMICOLON       reduce using rule 79 (numexpression1 -> addsub term .)
    RBRACKET        reduce using rule 79 (numexpression1 -> addsub term .)
    RPAREN          reduce using rule 79 (numexpression1 -> addsub term .)


state 121

    (84) term1 -> multdiv unaryexpr . term1
    (84) term1 -> . multdiv unaryexpr term1
    (85) term1 -> .
    (86) multdiv -> . MULTIPLY
    (87) multdiv -> . DIVIDE
    (88) multdiv -> . REM

    PLUS            reduce using rule 85 (term1 -> .)
    MINUS           reduce using rule 85 (term1 -> .)
    GT              reduce using rule 85 (term1 -> .)
    LT              reduce using rule 85 (term1 -> .)
    GE              reduce using rule 85 (term1 -> .)
    LE              reduce using rule 85 (term1 -> .)
    EQ              reduce using rule 85 (term1 -> .)
    NEQ             reduce using rule 85 (term1 -> .)
    SEMICOLON       reduce using rule 85 (term1 -> .)
    RBRACKET        reduce using rule 85 (term1 -> .)
    RPAREN          reduce using rule 85 (term1 -> .)
    MULTIPLY        shift and go to state 90
    DIVIDE          shift and go to state 91
    REM             shift and go to state 92

    multdiv                        shift and go to state 89
    term1                          shift and go to state 142

state 122

    (97) lvalue1 -> LBRACKET numexpression . RBRACKET lvalue1

    RBRACKET        shift and go to state 143


state 123

    (96) factor -> LPAREN numexpression RPAREN .

    MULTIPLY        reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    DIVIDE          reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    REM             reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    PLUS            reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    MINUS           reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    GT              reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    LT              reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    GE              reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    LE              reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    EQ              reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    NEQ             reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    SEMICOLON       reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    RBRACKET        reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    LBRACKET        reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    COMMA           reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)
    RPAREN          reduce using rule 96 (factor -> LPAREN numexpression RPAREN .)


state 124

    (54) ifstat -> IF LPAREN expression RPAREN . statement ifstat1
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)

    statement                      shift and go to state 144
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3

state 125

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON . forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (60) forstat2 -> . expression
    (61) forstat2 -> .
    (69) expression -> . numexpression expression1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    SEMICOLON       reduce using rule 61 (forstat2 -> .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    forstat2                       shift and go to state 145
    expression                     shift and go to state 146
    numexpression                  shift and go to state 41
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 126

    (58) forstat1 -> IDENT forstat3 .

    SEMICOLON       reduce using rule 58 (forstat1 -> IDENT forstat3 .)
    RPAREN          reduce using rule 58 (forstat1 -> IDENT forstat3 .)


state 127

    (62) forstat3 -> LBRACKET . numexpression RBRACKET lvalue1 ASSIGN atribstat1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 147
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 128

    (63) forstat3 -> ASSIGN . atribstat1
    (39) atribstat1 -> . expression
    (40) atribstat1 -> . allocexpression
    (41) atribstat1 -> . funccall
    (69) expression -> . numexpression expression1
    (68) allocexpression -> . NEW types LBRACKET numexpression RBRACKET lvalue1
    (42) funccall -> . IDENT LPAREN paramlistcall RPAREN
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    NEW             shift and go to state 71
    IDENT           shift and go to state 72
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    LPAREN          shift and go to state 53

    atribstat1                     shift and go to state 148
    expression                     shift and go to state 68
    allocexpression                shift and go to state 69
    funccall                       shift and go to state 70
    numexpression                  shift and go to state 41
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 129

    (64) whilestat -> WHILE LPAREN expression RPAREN . new_scope_loop statement
    (2) new_scope_loop -> .

    INT             reduce using rule 2 (new_scope_loop -> .)
    FLOAT           reduce using rule 2 (new_scope_loop -> .)
    STRING          reduce using rule 2 (new_scope_loop -> .)
    IDENT           reduce using rule 2 (new_scope_loop -> .)
    BREAK           reduce using rule 2 (new_scope_loop -> .)
    SEMICOLON       reduce using rule 2 (new_scope_loop -> .)
    PRINT           reduce using rule 2 (new_scope_loop -> .)
    READ            reduce using rule 2 (new_scope_loop -> .)
    RETURN          reduce using rule 2 (new_scope_loop -> .)
    IF              reduce using rule 2 (new_scope_loop -> .)
    FOR             reduce using rule 2 (new_scope_loop -> .)
    WHILE           reduce using rule 2 (new_scope_loop -> .)
    LBRACE          reduce using rule 2 (new_scope_loop -> .)

    new_scope_loop                 shift and go to state 149

state 130

    (9) funcdef -> DEF IDENT new_scope LPAREN . paramlist RPAREN LBRACE statelist RBRACE
    (13) paramlist -> . STRING listdcl IDENT paramlist1
    (14) paramlist -> . FLOAT listdcl IDENT paramlist1
    (15) paramlist -> . INT listdcl IDENT paramlist1
    (16) paramlist -> .

    STRING          shift and go to state 139
    FLOAT           shift and go to state 140
    INT             shift and go to state 141
    RPAREN          reduce using rule 16 (paramlist -> .)

    paramlist                      shift and go to state 150

state 131

    (37) statement2 -> LBRACKET numexpression RBRACKET . lvalue1 SEMICOLON
    (97) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (98) lvalue1 -> .

    LBRACKET        shift and go to state 95
    SEMICOLON       reduce using rule 98 (lvalue1 -> .)

    lvalue1                        shift and go to state 151

state 132

    (34) statement1 -> LBRACKET numexpression RBRACKET lvalue1 . ASSIGN atribstat1 SEMICOLON

    ASSIGN          shift and go to state 152


state 133

    (68) allocexpression -> NEW types LBRACKET . numexpression RBRACKET lvalue1
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    IDENT           shift and go to state 52
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 153
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 134

    (42) funccall -> IDENT LPAREN paramlistcall . RPAREN

    RPAREN          shift and go to state 154


state 135

    (36) statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .

    $end            reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    INT             reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    FLOAT           reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    STRING          reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    IDENT           reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    BREAK           reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    PRINT           reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    READ            reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    RETURN          reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    IF              reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    FOR             reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    WHILE           reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    LBRACE          reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    RBRACE          reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)
    ELSE            reduce using rule 36 (statement1 -> LPAREN paramlistcall RPAREN SEMICOLON .)


state 136

    (47) paramlistcall2 -> LBRACKET numexpression . RBRACKET lvalue1 paramlistcall1

    RBRACKET        shift and go to state 155


state 137

    (45) paramlistcall1 -> COMMA paramlistcall .

    RPAREN          reduce using rule 45 (paramlistcall1 -> COMMA paramlistcall .)


state 138

    (7) funclist1 -> DEF IDENT LPAREN paramlist . RPAREN LBRACE statelist RBRACE funclist1

    RPAREN          shift and go to state 156


state 139

    (13) paramlist -> STRING . listdcl IDENT paramlist1
    (19) listdcl -> . LBRACKET RBRACKET listdcl
    (20) listdcl -> .

    LBRACKET        shift and go to state 158
    IDENT           reduce using rule 20 (listdcl -> .)

    listdcl                        shift and go to state 157

state 140

    (14) paramlist -> FLOAT . listdcl IDENT paramlist1
    (19) listdcl -> . LBRACKET RBRACKET listdcl
    (20) listdcl -> .

    LBRACKET        shift and go to state 158
    IDENT           reduce using rule 20 (listdcl -> .)

    listdcl                        shift and go to state 159

state 141

    (15) paramlist -> INT . listdcl IDENT paramlist1
    (19) listdcl -> . LBRACKET RBRACKET listdcl
    (20) listdcl -> .

    LBRACKET        shift and go to state 158
    IDENT           reduce using rule 20 (listdcl -> .)

    listdcl                        shift and go to state 160

state 142

    (84) term1 -> multdiv unaryexpr term1 .

    PLUS            reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    MINUS           reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    GT              reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    LT              reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    GE              reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    LE              reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    EQ              reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    NEQ             reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    SEMICOLON       reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    RBRACKET        reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)
    RPAREN          reduce using rule 84 (term1 -> multdiv unaryexpr term1 .)


state 143

    (97) lvalue1 -> LBRACKET numexpression RBRACKET . lvalue1
    (97) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (98) lvalue1 -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 95
    MULTIPLY        reduce using rule 98 (lvalue1 -> .)
    DIVIDE          reduce using rule 98 (lvalue1 -> .)
    REM             reduce using rule 98 (lvalue1 -> .)
    PLUS            reduce using rule 98 (lvalue1 -> .)
    MINUS           reduce using rule 98 (lvalue1 -> .)
    GT              reduce using rule 98 (lvalue1 -> .)
    LT              reduce using rule 98 (lvalue1 -> .)
    GE              reduce using rule 98 (lvalue1 -> .)
    LE              reduce using rule 98 (lvalue1 -> .)
    EQ              reduce using rule 98 (lvalue1 -> .)
    NEQ             reduce using rule 98 (lvalue1 -> .)
    SEMICOLON       reduce using rule 98 (lvalue1 -> .)
    RBRACKET        reduce using rule 98 (lvalue1 -> .)
    COMMA           reduce using rule 98 (lvalue1 -> .)
    RPAREN          reduce using rule 98 (lvalue1 -> .)
    ASSIGN          reduce using rule 98 (lvalue1 -> .)

  ! LBRACKET        [ reduce using rule 98 (lvalue1 -> .) ]

    lvalue1                        shift and go to state 161

state 144

    (54) ifstat -> IF LPAREN expression RPAREN statement . ifstat1
    (55) ifstat1 -> . ELSE statement
    (56) ifstat1 -> .

    ELSE            shift and go to state 163
    $end            reduce using rule 56 (ifstat1 -> .)
    INT             reduce using rule 56 (ifstat1 -> .)
    FLOAT           reduce using rule 56 (ifstat1 -> .)
    STRING          reduce using rule 56 (ifstat1 -> .)
    IDENT           reduce using rule 56 (ifstat1 -> .)
    BREAK           reduce using rule 56 (ifstat1 -> .)
    SEMICOLON       reduce using rule 56 (ifstat1 -> .)
    PRINT           reduce using rule 56 (ifstat1 -> .)
    READ            reduce using rule 56 (ifstat1 -> .)
    RETURN          reduce using rule 56 (ifstat1 -> .)
    IF              reduce using rule 56 (ifstat1 -> .)
    FOR             reduce using rule 56 (ifstat1 -> .)
    WHILE           reduce using rule 56 (ifstat1 -> .)
    LBRACE          reduce using rule 56 (ifstat1 -> .)
    RBRACE          reduce using rule 56 (ifstat1 -> .)

  ! ELSE            [ reduce using rule 56 (ifstat1 -> .) ]

    ifstat1                        shift and go to state 162

state 145

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 . SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE

    SEMICOLON       shift and go to state 164


state 146

    (60) forstat2 -> expression .

    SEMICOLON       reduce using rule 60 (forstat2 -> expression .)


state 147

    (62) forstat3 -> LBRACKET numexpression . RBRACKET lvalue1 ASSIGN atribstat1

    RBRACKET        shift and go to state 165


state 148

    (63) forstat3 -> ASSIGN atribstat1 .

    SEMICOLON       reduce using rule 63 (forstat3 -> ASSIGN atribstat1 .)
    RPAREN          reduce using rule 63 (forstat3 -> ASSIGN atribstat1 .)


state 149

    (64) whilestat -> WHILE LPAREN expression RPAREN new_scope_loop . statement
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)

    statement                      shift and go to state 166
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3

state 150

    (9) funcdef -> DEF IDENT new_scope LPAREN paramlist . RPAREN LBRACE statelist RBRACE

    RPAREN          shift and go to state 167


state 151

    (37) statement2 -> LBRACKET numexpression RBRACKET lvalue1 . SEMICOLON

    SEMICOLON       shift and go to state 168


state 152

    (34) statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN . atribstat1 SEMICOLON
    (39) atribstat1 -> . expression
    (40) atribstat1 -> . allocexpression
    (41) atribstat1 -> . funccall
    (69) expression -> . numexpression expression1
    (68) allocexpression -> . NEW types LBRACKET numexpression RBRACKET lvalue1
    (42) funccall -> . IDENT LPAREN paramlistcall RPAREN
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    NEW             shift and go to state 71
    IDENT           shift and go to state 72
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 41
    atribstat1                     shift and go to state 169
    expression                     shift and go to state 68
    allocexpression                shift and go to state 69
    funccall                       shift and go to state 70
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 153

    (68) allocexpression -> NEW types LBRACKET numexpression . RBRACKET lvalue1

    RBRACKET        shift and go to state 170


state 154

    (42) funccall -> IDENT LPAREN paramlistcall RPAREN .

    SEMICOLON       reduce using rule 42 (funccall -> IDENT LPAREN paramlistcall RPAREN .)
    RPAREN          reduce using rule 42 (funccall -> IDENT LPAREN paramlistcall RPAREN .)


state 155

    (47) paramlistcall2 -> LBRACKET numexpression RBRACKET . lvalue1 paramlistcall1
    (97) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (98) lvalue1 -> .

    LBRACKET        shift and go to state 95
    COMMA           reduce using rule 98 (lvalue1 -> .)
    RPAREN          reduce using rule 98 (lvalue1 -> .)

    lvalue1                        shift and go to state 171

state 156

    (7) funclist1 -> DEF IDENT LPAREN paramlist RPAREN . LBRACE statelist RBRACE funclist1

    LBRACE          shift and go to state 172


state 157

    (13) paramlist -> STRING listdcl . IDENT paramlist1

    IDENT           shift and go to state 173


state 158

    (19) listdcl -> LBRACKET . RBRACKET listdcl

    RBRACKET        shift and go to state 174


state 159

    (14) paramlist -> FLOAT listdcl . IDENT paramlist1

    IDENT           shift and go to state 175


state 160

    (15) paramlist -> INT listdcl . IDENT paramlist1

    IDENT           shift and go to state 176


state 161

    (97) lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .

    MULTIPLY        reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    DIVIDE          reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    REM             reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    PLUS            reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    MINUS           reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    GT              reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    LT              reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    GE              reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    LE              reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    EQ              reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    NEQ             reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    SEMICOLON       reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    RBRACKET        reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    LBRACKET        reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    COMMA           reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    RPAREN          reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)
    ASSIGN          reduce using rule 97 (lvalue1 -> LBRACKET numexpression RBRACKET lvalue1 .)


state 162

    (54) ifstat -> IF LPAREN expression RPAREN statement ifstat1 .

    $end            reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    INT             reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    FLOAT           reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    STRING          reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    IDENT           reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    BREAK           reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    SEMICOLON       reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    PRINT           reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    READ            reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    RETURN          reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    IF              reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    FOR             reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    WHILE           reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    LBRACE          reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    RBRACE          reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)
    ELSE            reduce using rule 54 (ifstat -> IF LPAREN expression RPAREN statement ifstat1 .)


state 163

    (55) ifstat1 -> ELSE . statement
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)

    statement                      shift and go to state 177
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3

state 164

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON . forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (58) forstat1 -> . IDENT forstat3
    (59) forstat1 -> .

    IDENT           shift and go to state 99
    RPAREN          reduce using rule 59 (forstat1 -> .)

    forstat1                       shift and go to state 178

state 165

    (62) forstat3 -> LBRACKET numexpression RBRACKET . lvalue1 ASSIGN atribstat1
    (97) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (98) lvalue1 -> .

    LBRACKET        shift and go to state 95
    ASSIGN          reduce using rule 98 (lvalue1 -> .)

    lvalue1                        shift and go to state 179

state 166

    (64) whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .

    $end            reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    INT             reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    FLOAT           reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    STRING          reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    IDENT           reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    BREAK           reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    SEMICOLON       reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    PRINT           reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    READ            reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    RETURN          reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    IF              reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    FOR             reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    WHILE           reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    LBRACE          reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    RBRACE          reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)
    ELSE            reduce using rule 64 (whilestat -> WHILE LPAREN expression RPAREN new_scope_loop statement .)


state 167

    (9) funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN . LBRACE statelist RBRACE

    LBRACE          shift and go to state 180


state 168

    (37) statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .

    $end            reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    INT             reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    FLOAT           reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    STRING          reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    IDENT           reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    BREAK           reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    SEMICOLON       reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    PRINT           reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    READ            reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    RETURN          reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    IF              reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    FOR             reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    WHILE           reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    LBRACE          reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    RBRACE          reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)
    ELSE            reduce using rule 37 (statement2 -> LBRACKET numexpression RBRACKET lvalue1 SEMICOLON .)


state 169

    (34) statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 . SEMICOLON

    SEMICOLON       shift and go to state 181


state 170

    (68) allocexpression -> NEW types LBRACKET numexpression RBRACKET . lvalue1
    (97) lvalue1 -> . LBRACKET numexpression RBRACKET lvalue1
    (98) lvalue1 -> .

    LBRACKET        shift and go to state 95
    SEMICOLON       reduce using rule 98 (lvalue1 -> .)
    RPAREN          reduce using rule 98 (lvalue1 -> .)

    lvalue1                        shift and go to state 182

state 171

    (47) paramlistcall2 -> LBRACKET numexpression RBRACKET lvalue1 . paramlistcall1
    (45) paramlistcall1 -> . COMMA paramlistcall
    (46) paramlistcall1 -> .

    COMMA           shift and go to state 117
    RPAREN          reduce using rule 46 (paramlistcall1 -> .)

    paramlistcall1                 shift and go to state 183

state 172

    (7) funclist1 -> DEF IDENT LPAREN paramlist RPAREN LBRACE . statelist RBRACE funclist1
    (65) statelist -> . statement statelist1
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)

    statelist                      shift and go to state 184
    statement                      shift and go to state 62
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3

state 173

    (13) paramlist -> STRING listdcl IDENT . paramlist1
    (17) paramlist1 -> . COMMA paramlist
    (18) paramlist1 -> .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 18 (paramlist1 -> .)

    paramlist1                     shift and go to state 185

state 174

    (19) listdcl -> LBRACKET RBRACKET . listdcl
    (19) listdcl -> . LBRACKET RBRACKET listdcl
    (20) listdcl -> .

    LBRACKET        shift and go to state 158
    IDENT           reduce using rule 20 (listdcl -> .)

    listdcl                        shift and go to state 187

state 175

    (14) paramlist -> FLOAT listdcl IDENT . paramlist1
    (17) paramlist1 -> . COMMA paramlist
    (18) paramlist1 -> .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 18 (paramlist1 -> .)

    paramlist1                     shift and go to state 188

state 176

    (15) paramlist -> INT listdcl IDENT . paramlist1
    (17) paramlist1 -> . COMMA paramlist
    (18) paramlist1 -> .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 18 (paramlist1 -> .)

    paramlist1                     shift and go to state 189

state 177

    (55) ifstat1 -> ELSE statement .

    ELSE            reduce using rule 55 (ifstat1 -> ELSE statement .)
    $end            reduce using rule 55 (ifstat1 -> ELSE statement .)
    INT             reduce using rule 55 (ifstat1 -> ELSE statement .)
    FLOAT           reduce using rule 55 (ifstat1 -> ELSE statement .)
    STRING          reduce using rule 55 (ifstat1 -> ELSE statement .)
    IDENT           reduce using rule 55 (ifstat1 -> ELSE statement .)
    BREAK           reduce using rule 55 (ifstat1 -> ELSE statement .)
    SEMICOLON       reduce using rule 55 (ifstat1 -> ELSE statement .)
    PRINT           reduce using rule 55 (ifstat1 -> ELSE statement .)
    READ            reduce using rule 55 (ifstat1 -> ELSE statement .)
    RETURN          reduce using rule 55 (ifstat1 -> ELSE statement .)
    IF              reduce using rule 55 (ifstat1 -> ELSE statement .)
    FOR             reduce using rule 55 (ifstat1 -> ELSE statement .)
    WHILE           reduce using rule 55 (ifstat1 -> ELSE statement .)
    LBRACE          reduce using rule 55 (ifstat1 -> ELSE statement .)
    RBRACE          reduce using rule 55 (ifstat1 -> ELSE statement .)


state 178

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 . RPAREN new_scope_loop LBRACE statelist RBRACE

    RPAREN          shift and go to state 190


state 179

    (62) forstat3 -> LBRACKET numexpression RBRACKET lvalue1 . ASSIGN atribstat1

    ASSIGN          shift and go to state 191


state 180

    (9) funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE . statelist RBRACE
    (65) statelist -> . statement statelist1
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 3
    statelist                      shift and go to state 192
    statement                      shift and go to state 62
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16

state 181

    (34) statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .

    $end            reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    INT             reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    FLOAT           reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    STRING          reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    IDENT           reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    BREAK           reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    SEMICOLON       reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    PRINT           reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    READ            reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    RETURN          reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    IF              reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    FOR             reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    WHILE           reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    LBRACE          reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    RBRACE          reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)
    ELSE            reduce using rule 34 (statement1 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 SEMICOLON .)


state 182

    (68) allocexpression -> NEW types LBRACKET numexpression RBRACKET lvalue1 .

    SEMICOLON       reduce using rule 68 (allocexpression -> NEW types LBRACKET numexpression RBRACKET lvalue1 .)
    RPAREN          reduce using rule 68 (allocexpression -> NEW types LBRACKET numexpression RBRACKET lvalue1 .)


state 183

    (47) paramlistcall2 -> LBRACKET numexpression RBRACKET lvalue1 paramlistcall1 .

    RPAREN          reduce using rule 47 (paramlistcall2 -> LBRACKET numexpression RBRACKET lvalue1 paramlistcall1 .)


state 184

    (7) funclist1 -> DEF IDENT LPAREN paramlist RPAREN LBRACE statelist . RBRACE funclist1

    RBRACE          shift and go to state 193


state 185

    (13) paramlist -> STRING listdcl IDENT paramlist1 .

    RPAREN          reduce using rule 13 (paramlist -> STRING listdcl IDENT paramlist1 .)


state 186

    (17) paramlist1 -> COMMA . paramlist
    (13) paramlist -> . STRING listdcl IDENT paramlist1
    (14) paramlist -> . FLOAT listdcl IDENT paramlist1
    (15) paramlist -> . INT listdcl IDENT paramlist1
    (16) paramlist -> .

    STRING          shift and go to state 139
    FLOAT           shift and go to state 140
    INT             shift and go to state 141
    RPAREN          reduce using rule 16 (paramlist -> .)

    paramlist                      shift and go to state 194

state 187

    (19) listdcl -> LBRACKET RBRACKET listdcl .

    IDENT           reduce using rule 19 (listdcl -> LBRACKET RBRACKET listdcl .)


state 188

    (14) paramlist -> FLOAT listdcl IDENT paramlist1 .

    RPAREN          reduce using rule 14 (paramlist -> FLOAT listdcl IDENT paramlist1 .)


state 189

    (15) paramlist -> INT listdcl IDENT paramlist1 .

    RPAREN          reduce using rule 15 (paramlist -> INT listdcl IDENT paramlist1 .)


state 190

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN . new_scope_loop LBRACE statelist RBRACE
    (2) new_scope_loop -> .

    LBRACE          reduce using rule 2 (new_scope_loop -> .)

    new_scope_loop                 shift and go to state 195

state 191

    (62) forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN . atribstat1
    (39) atribstat1 -> . expression
    (40) atribstat1 -> . allocexpression
    (41) atribstat1 -> . funccall
    (69) expression -> . numexpression expression1
    (68) allocexpression -> . NEW types LBRACKET numexpression RBRACKET lvalue1
    (42) funccall -> . IDENT LPAREN paramlistcall RPAREN
    (78) numexpression -> . term numexpression1
    (83) term -> . unaryexpr term1
    (89) unaryexpr -> . addsub factor
    (90) unaryexpr -> . factor
    (81) addsub -> . PLUS
    (82) addsub -> . MINUS
    (91) factor -> . int_constant
    (92) factor -> . float_constant
    (93) factor -> . string_constant
    (94) factor -> . null_constant
    (95) factor -> . IDENT lvalue1
    (96) factor -> . LPAREN numexpression RPAREN

    NEW             shift and go to state 71
    IDENT           shift and go to state 72
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    int_constant    shift and go to state 48
    float_constant  shift and go to state 49
    string_constant shift and go to state 50
    null_constant   shift and go to state 51
    LPAREN          shift and go to state 53

    numexpression                  shift and go to state 41
    atribstat1                     shift and go to state 196
    expression                     shift and go to state 68
    allocexpression                shift and go to state 69
    funccall                       shift and go to state 70
    term                           shift and go to state 42
    unaryexpr                      shift and go to state 43
    addsub                         shift and go to state 44
    factor                         shift and go to state 45

state 192

    (9) funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist . RBRACE

    RBRACE          shift and go to state 197


state 193

    (7) funclist1 -> DEF IDENT LPAREN paramlist RPAREN LBRACE statelist RBRACE . funclist1
    (7) funclist1 -> . DEF IDENT LPAREN paramlist RPAREN LBRACE statelist RBRACE funclist1
    (8) funclist1 -> .

    DEF             shift and go to state 39
    $end            reduce using rule 8 (funclist1 -> .)

    funclist1                      shift and go to state 198

state 194

    (17) paramlist1 -> COMMA paramlist .

    RPAREN          reduce using rule 17 (paramlist1 -> COMMA paramlist .)


state 195

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop . LBRACE statelist RBRACE

    LBRACE          shift and go to state 199


state 196

    (62) forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 .

    SEMICOLON       reduce using rule 62 (forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 .)
    RPAREN          reduce using rule 62 (forstat3 -> LBRACKET numexpression RBRACKET lvalue1 ASSIGN atribstat1 .)


state 197

    (9) funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE .

    DEF             reduce using rule 9 (funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE .)
    $end            reduce using rule 9 (funcdef -> DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE .)


state 198

    (7) funclist1 -> DEF IDENT LPAREN paramlist RPAREN LBRACE statelist RBRACE funclist1 .

    $end            reduce using rule 7 (funclist1 -> DEF IDENT LPAREN paramlist RPAREN LBRACE statelist RBRACE funclist1 .)


state 199

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE . statelist RBRACE
    (65) statelist -> . statement statelist1
    (21) statement -> . INT IDENT statement2
    (22) statement -> . FLOAT IDENT statement2
    (23) statement -> . STRING IDENT statement2
    (24) statement -> . IDENT statement1
    (25) statement -> . printstat SEMICOLON
    (26) statement -> . readstat SEMICOLON
    (27) statement -> . returnstat SEMICOLON
    (28) statement -> . ifstat
    (29) statement -> . forstat
    (30) statement -> . whilestat
    (31) statement -> . new_scope LBRACE statelist RBRACE
    (32) statement -> . BREAK SEMICOLON
    (33) statement -> . SEMICOLON
    (49) printstat -> . PRINT expression
    (50) readstat -> . READ expression
    (51) returnstat -> . RETURN returnstat1
    (54) ifstat -> . IF LPAREN expression RPAREN statement ifstat1
    (57) forstat -> . FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE
    (64) whilestat -> . WHILE LPAREN expression RPAREN new_scope_loop statement
    (1) new_scope -> .

    INT             shift and go to state 6
    FLOAT           shift and go to state 8
    STRING          shift and go to state 9
    IDENT           shift and go to state 7
    BREAK           shift and go to state 17
    SEMICOLON       shift and go to state 11
    PRINT           shift and go to state 19
    READ            shift and go to state 20
    RETURN          shift and go to state 21
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    LBRACE          reduce using rule 1 (new_scope -> .)

    statelist                      shift and go to state 200
    statement                      shift and go to state 62
    printstat                      shift and go to state 10
    readstat                       shift and go to state 12
    returnstat                     shift and go to state 13
    ifstat                         shift and go to state 14
    forstat                        shift and go to state 15
    whilestat                      shift and go to state 16
    new_scope                      shift and go to state 3

state 200

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist . RBRACE

    RBRACE          shift and go to state 201


state 201

    (57) forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .

    $end            reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    INT             reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    FLOAT           reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    STRING          reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    IDENT           reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    BREAK           reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    SEMICOLON       reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    PRINT           reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    READ            reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    RETURN          reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    IF              reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    FOR             reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    WHILE           reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    LBRACE          reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    RBRACE          reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)
    ELSE            reduce using rule 57 (forstat -> FOR LPAREN forstat1 SEMICOLON forstat2 SEMICOLON forstat1 RPAREN new_scope_loop LBRACE statelist RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 52 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 143 resolved as shift
