scope_stack = []
num_expressions = []

search_var(ident, lineno, lazy)
num_expressions_as_json()
new_scope(loop)
check_type(left, right, operation, lineno)
lazy_check()

'''
new_loop_label : &
'''

NEXT_LOOP_LABEL = generate_label()

'''
new_scope : &
'''

add_scope(False)

'''
new_scope_loop : &
'''

add_scope(True)

'''
program : new_scope statement | new_scope funclist
'''

global_scope = scope_stack.pop()
program = {
    'scopes': global_scope.as_json(),
    'num_expressions': num_expressions_as_json(),
    'code': statement['code']
}

'''
program : &
'''

'''
funclist : funcdef funclist1
'''

funclist = {
    'code': [*funcdef['code'], *funclist1['code']]
}

'''
funclist1 : funclist
'''

funclist1 = {'code': funclist['code'] }

'''
funclist1 : &
'''

funclist1 = {'code': []}


'''
funcdef : DEF IDENT new_scope LPAREN paramlist RPAREN LBRACE statelist RBRACE
'''

scope_stack.pop()

scope = scope_stack[-1]
entry = EntradaTabela(IDENT, 'function', paramlist['dim'], [], IDENT.lineno)

scope.new_entry(entry)

lazy_check()

next = generate_label()
funcdef = { 'code': ['goto {next}', '{IDENT}:', *paramlist['code'], *statelist['code'], '{next}:'] }

'''
types : INT
'''

types = {'type': INT, 'code': INT}

'''
types : FLOAT
'''

types = {'type': FLOAT, 'code': FLOAT}

'''
types : STRING
'''

types = {'type': STRING, 'code': STRING}

'''
paramlist : STRING listdcl IDENT paramlist1 
'''

scope = scope_stack[-1]
entry = EntradaTabela(IDENT, STRING, listdcl['dim'], [-1] * listdcl['dim'], IDENT.lineno)
scope.new_entry(entry)

paramlist = { 'dim': paramlist1['dim'] + 1, 'code': ['from_params {IDENT}', *paramlist1['code']] }

'''
paramlist : FLOAT listdcl IDENT paramlist1 
'''

scope = scope_stack[-1]
entry = EntradaTabela(IDENT, FLOAT, listdcl['dim'], [-1] * listdcl['dim'], IDENT.lineno)
scope.new_entry(entry)

paramlist = { 'dim': paramlist1['dim'] + 1, 'code': ['from_params {IDENT}', *paramlist1['code']] }

'''
paramlist : INT listdcl IDENT paramlist1 
'''
scope = scope_stack[-1]
entry = EntradaTabela(IDENT, INT, listdcl['dim'], [-1] * listdcl['dim'], IDENT.lineno)
scope.new_entry(entry)

paramlist = { 'dim': paramlist1['dim'] + 1, 'code': [f'from_params {IDENT}', *paramlist1['code']] }

'''
paramlist : &
'''

paramlist = { 'dim': 0, 'code': [] }


'''
paramlist1 : COMMA paramlist
'''

paramlist1 = { 'dim': paramlist['dim'], 'code': paramlist['code'] }


'''
paramlist1 : &
'''
paramlist1 = { 'dim': 0, 'code': [] }


'''
listdcl-1 : LBRACKET RBRACKET listdcl-2
'''

listdcl-1 = {'dim': listdcl-2['dim'] + 1, 'code': "[]{listdcl-2['code']}"}


'''
listdcl : &
'''

listdcl = {'dim': 0, 'code': ''}

'''
statement : INT IDENT statement2
'''

entry = EntradaTabela(IDENT, INT, statement2['dim'], statement2['sizes'], IDENT.lineno)
scope = scope_stack[-1]
scope.new_entry(entry)

statement = {'code': [*statement2['code'], "int {IDENT}{statement2['aux_code']}"]}


'''
statement : FLOAT IDENT statement2
'''

entry = EntradaTabela(IDENT, FLOAT, statement2['dim'], statement2['sizes'], IDENT.lineno)
scope = scope_stack[-1]
scope.new_entry(entry)

statement = {'code': [*statement2['code'], "float {IDENT}{statement2['aux_code']}"]}

'''
statement : STRING IDENT statement2
'''

entry = EntradaTabela(IDENT, STRING, statement2['dim'], statement2['sizes'], IDENT.lineno)
scope = scope_stack[-1]
scope.new_entry(entry)

statement = {'code': [*statement2['code'], "string {IDENT}{statement2['aux_code']}"]}

'''
statement2 : LBRACKET numexpression RBRACKET lvalue1 SEMICOLON
'''

statement2 = { 
    'dim': lvalue1['dim'] + 1,
    'sizes': [numexpression['node'], *lvalue1['sizes']],
    'code': [*numexpression['code'], *lvalue1['code']],
    'aux_code': "[{numexpression['label']}]{lvalue1['aux_code']}"
}


'''
statement2 : SEMICOLON
'''

statement2 = { 'dim': 0, 'sizes': [], 'code': [], 'aux_code': '' }

'''
numexpression : term numexpression1
'''

if numexpression1['code']:
    rtype = check_type(term['node'], numexpression1['node'], numexpression1['operator'], term.lineno)

    var = get_var()
    numexpression = { 
        'node': Node(numexpression1['operator'], term['node'], numexpression1['node'], rtype),
        'code': [*term['code'], *numexpression1['code'], "{var} = {term['label']} {numexpression1['operator']} {numexpression1['label']}"],
        'label': var
    }
else:
    numexpression = term

'''
numexpression1 : addsub term
'''

numexpression1 = { 'node': term['node'], 'operator': addsub, 'code': term['code'], 'label': term['label'] }


'''
numexpression1 : &
'''

numexpression1 = { 'code': [] }

'''
addsub : PLUS
'''

addsub = '+'


'''
addsub : MINUS
'''

addsub = '-'


'''
term : unaryexpr term1
'''

if term1['code']:
    rtype = check_type(unaryexpr['node'], term1['node'], term1['operator'], unaryexpr.lineno)

    var = get_var()


    term = {
        'node': Node(term1['operator'], unaryexpr['node'], term1['node'], rtype),
        'code': [*unaryexpr['code'], "{var} = {unaryexpr['label']} {term1['operator']} {term1['label']}"],
        'label': var
    } 
else:
    term = unaryexpr


'''
term1 : multdiv unaryexpr term1
'''

if term1['code']:
    rtype = check_type(unaryexpr['node'], term1['node'], term1['operator'], unaryexpr.lineno)

    var = get_var()

    term1 = { 
        'node': Node(term1['operator'], unaryexpr['node'], term1['node'], rtype), 
        'operator': multdiv,
        'code': [*unaryexpr['code'], *term1['code'], "{var} = {unaryexpr['label']} {term1['operator']} {term1['label']}"],
        'label': var
    }
else:
    term1 = { 'node': unaryexpr['node'], 'operator': multdiv, 'code': unaryexpr['code'], 'label': unaryexpr['label'] }

'''
term1 : &
'''

term1 = { 'code': [] }

'''
multdiv : MULTIPLY
'''

multdiv = '*'

'''
multdiv : DIVIDE
'''

multdiv = '/'

'''
multdiv : REM
'''

multdiv = '%'

'''
unaryexpr : addsub factor
'''
if (addsub == '-'):
    factor['node'].value *= -1

var = get_var()

unaryexpr = { 'node': factor['node'], 'code': [*factor['code'], *([f"{var} = {addsub}{factor['label']}"] if addsub == '-' else [])], 'label': var }


'''
unaryexpr : factor
'''

unaryexpr = factor


'''
factor : int_constant
'''
var = get_var()

factor = { 'node': Node(int_constant, None, None, 'int'), 'code': [f'{var} = {int_constant}'], 'label': var }


'''
factor : float_constant
'''

var = get_var()

factor = { 'node': Node(float_constant, None, None, 'float'), 'code': [f'{var} = {float_constant}'], 'label': var  }


'''
factor : string_constant
'''

var = get_var()

factor = { 'node': Node(string_constant, None, None, 'string'), 'code': [f'{var} = {string_constant}'], 'label': var  }


'''
factor : null_constant
'''

var = get_var()

factor = { 'node': Node('null', None, None, 'null'), 'code': ['{var} = null'], 'label': var }

'''
factor : IDENT lvalue1
'''

var = search_var(IDENT, IDENT.lineno)
nvar = get_var()

factor = {
    'node': Node(IDENT + lvalue1['expression'], None, None, type2str(var.type, var.dimension, lvalue1['dim'])),
    'code': [f"{nvar} = {IDENT}{lvalue1['aux_code']}"],
    'label': nvar,
    'vartype': 'ident'
}

'''
factor : LPAREN numexpression RPAREN
'''
factor = numexpression

num_expressions.append((numexpression['node'], numexpression.lineno))

'''
lvalue1 : LBRACKET numexpression RBRACKET lvalue1
'''
lvalue1 = {
    'dim': lvalue1['dim'] + 1,
    'sizes': [numexpression['node'], *lvalue1['sizes']],
    'expression': '[{numexpression}]{lvalue1}',
    'code': [*numexpression['code'], *lvalue1['code']],
    'aux_code': "[{numexpression['label']}]{lvalue1['aux_code']}"
}

num_expressions.append((numexpression['node'], numexpression.lineno))

'''
lvalue1 : &
'''
lvalue1 = {
    'dim': 0,
    'sizes': [],
    'expression': '',
    'code': [],
    'aux_code': ''
}
